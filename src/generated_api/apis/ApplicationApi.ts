/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppRolesQuery200Response,
  ServiceProxyErrorRespModel,
  ServiceStandardErrorRespModel,
  V0AppDeleteRespModel,
  V0AppListResponseModel,
  V0AppNotificationSettingsParams,
  V0AppNotificationSettingsUpdateResponse,
  V0AppShowResponseModel,
  V0AppUpdateParams,
  V0AppUpdateRespModel,
  V0BranchListResponseModel,
} from '../models/index';
import {
    AppRolesQuery200ResponseFromJSON,
    AppRolesQuery200ResponseToJSON,
    ServiceProxyErrorRespModelFromJSON,
    ServiceProxyErrorRespModelToJSON,
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0AppDeleteRespModelFromJSON,
    V0AppDeleteRespModelToJSON,
    V0AppListResponseModelFromJSON,
    V0AppListResponseModelToJSON,
    V0AppNotificationSettingsParamsFromJSON,
    V0AppNotificationSettingsParamsToJSON,
    V0AppNotificationSettingsUpdateResponseFromJSON,
    V0AppNotificationSettingsUpdateResponseToJSON,
    V0AppShowResponseModelFromJSON,
    V0AppShowResponseModelToJSON,
    V0AppUpdateParamsFromJSON,
    V0AppUpdateParamsToJSON,
    V0AppUpdateRespModelFromJSON,
    V0AppUpdateRespModelToJSON,
    V0BranchListResponseModelFromJSON,
    V0BranchListResponseModelToJSON,
} from '../models/index';

export interface AppConfigDatastoreShowRequest {
    appSlug: string;
}

export interface AppDeleteRequest {
    appSlug: string;
}

export interface AppListRequest {
    sortBy?: AppListSortByEnum;
    next?: string;
    limit?: number;
    title?: string;
    projectType?: string;
}

export interface AppListByOrganizationRequest {
    orgSlug: string;
    sortBy?: AppListByOrganizationSortByEnum;
    next?: string;
    limit?: number;
    title?: string;
    projectType?: string;
}

export interface AppListByUserRequest {
    userSlug: string;
    sortBy?: AppListByUserSortByEnum;
    next?: string;
    limit?: number;
    title?: string;
    projectType?: string;
}

export interface AppNotificationsRequest {
    appSlug: string;
    notificationSettingsParams: V0AppNotificationSettingsParams;
}

export interface AppRolesQueryRequest {
    appSlug: string;
    roleName: AppRolesQueryRoleNameEnum;
}

export interface AppRolesUpdateRequest {
    appSlug: string;
    roleName: AppRolesUpdateRoleNameEnum;
    groups: AppRolesQuery200Response;
}

export interface AppShowRequest {
    appSlug: string;
}

export interface AppUpdateRequest {
    appSlug: string;
    app: V0AppUpdateParams;
}

export interface BranchListRequest {
    appSlug: string;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * Get the full `bitrise.yml` configuration of an application, by providing the app slug. It returns the current `bitrise.yml` that is stored on bitrise.io in full, including the trigger map, the different workflows and the Steps.
     * Get bitrise.yml of a specific app
     */
    async appConfigDatastoreShowRaw(requestParameters: AppConfigDatastoreShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appConfigDatastoreShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/bitrise.yml`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the full `bitrise.yml` configuration of an application, by providing the app slug. It returns the current `bitrise.yml` that is stored on bitrise.io in full, including the trigger map, the different workflows and the Steps.
     * Get bitrise.yml of a specific app
     */
    async appConfigDatastoreShow(requestParameters: AppConfigDatastoreShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.appConfigDatastoreShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an app by slug. Use with care, make sure you really want to delete the app. This action cannot be undone.
     * Deletes an app
     */
    async appDeleteRaw(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppDeleteRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppDeleteRespModelFromJSON(jsonValue));
    }

    /**
     * Deletes an app by slug. Use with care, make sure you really want to delete the app. This action cannot be undone.
     * Deletes an app
     */
    async appDelete(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppDeleteRespModel> {
        const response = await this.appDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the apps available for the authenticated account, including those that are owned by other users or Organizations.
     * Get list of the apps
     */
    async appListRaw(requestParameters: AppListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppListResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the apps available for the authenticated account, including those that are owned by other users or Organizations.
     * Get list of the apps
     */
    async appList(requestParameters: AppListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppListResponseModel> {
        const response = await this.appListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the available apps owned by a given organization. [Find the organization URL](https://devcenter.bitrise.io/team-management/organizations/org-url/) of the organisations you are part of; be aware that the endpoint will not return any apps if the authenticated account is not a member of the given organisation.
     * Get list of the apps for an organization
     */
    async appListByOrganizationRaw(requestParameters: AppListByOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppListResponseModel>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling appListByOrganization().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/apps`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the available apps owned by a given organization. [Find the organization URL](https://devcenter.bitrise.io/team-management/organizations/org-url/) of the organisations you are part of; be aware that the endpoint will not return any apps if the authenticated account is not a member of the given organisation.
     * Get list of the apps for an organization
     */
    async appListByOrganization(requestParameters: AppListByOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppListResponseModel> {
        const response = await this.appListByOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the available apps for the given user.  It needs the user slug that you can get from the [GET /me](https://api-docs.bitrise.io/#/user/user-profile) endpoint.
     * Get list of the apps for a user
     */
    async appListByUserRaw(requestParameters: AppListByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppListResponseModel>> {
        if (requestParameters['userSlug'] == null) {
            throw new runtime.RequiredError(
                'userSlug',
                'Required parameter "userSlug" was null or undefined when calling appListByUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/users/{user-slug}/apps`.replace(`{${"user-slug"}}`, encodeURIComponent(String(requestParameters['userSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the available apps for the given user.  It needs the user slug that you can get from the [GET /me](https://api-docs.bitrise.io/#/user/user-profile) endpoint.
     * Get list of the apps for a user
     */
    async appListByUser(requestParameters: AppListByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppListResponseModel> {
        const response = await this.appListByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the app\'s email notification settings with parameters
     * Updates the app\'s notification settings
     */
    async appNotificationsRaw(requestParameters: AppNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppNotificationSettingsUpdateResponse>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appNotifications().'
            );
        }

        if (requestParameters['notificationSettingsParams'] == null) {
            throw new runtime.RequiredError(
                'notificationSettingsParams',
                'Required parameter "notificationSettingsParams" was null or undefined when calling appNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/update-email-notifications`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppNotificationSettingsParamsToJSON(requestParameters['notificationSettingsParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppNotificationSettingsUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Updates the app\'s email notification settings with parameters
     * Updates the app\'s notification settings
     */
    async appNotifications(requestParameters: AppNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppNotificationSettingsUpdateResponse> {
        const response = await this.appNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists group roles for an app
     */
    async appRolesQueryRaw(requestParameters: AppRolesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRolesQuery200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appRolesQuery().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRolesQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/roles/{role-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRolesQuery200ResponseFromJSON(jsonValue));
    }

    /**
     * Lists group roles for an app
     */
    async appRolesQuery(requestParameters: AppRolesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRolesQuery200Response> {
        const response = await this.appRolesQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces the groups for a given role on an app. Only the given groups will be present for a role on the app after this call.
     * Replaces group roles for an app
     */
    async appRolesUpdateRaw(requestParameters: AppRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppRolesQuery200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appRolesUpdate().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling appRolesUpdate().'
            );
        }

        if (requestParameters['groups'] == null) {
            throw new runtime.RequiredError(
                'groups',
                'Required parameter "groups" was null or undefined when calling appRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/roles/{role-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"role-name"}}`, encodeURIComponent(String(requestParameters['roleName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppRolesQuery200ResponseToJSON(requestParameters['groups']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppRolesQuery200ResponseFromJSON(jsonValue));
    }

    /**
     * Replaces the groups for a given role on an app. Only the given groups will be present for a role on the app after this call.
     * Replaces group roles for an app
     */
    async appRolesUpdate(requestParameters: AppRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppRolesQuery200Response> {
        const response = await this.appRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the details of a specific app by providing the app slug. You can get the app slug by calling the [/apps](https://api-docs.bitrise.io/#/application/app-list) endpoint or by opening the app on bitrise.io and copying the slug from the URL.
     * Get a specific app
     */
    async appShowRaw(requestParameters: AppShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppShowResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Get the details of a specific app by providing the app slug. You can get the app slug by calling the [/apps](https://api-docs.bitrise.io/#/application/app-list) endpoint or by opening the app on bitrise.io and copying the slug from the URL.
     * Get a specific app
     */
    async appShow(requestParameters: AppShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppShowResponseModel> {
        const response = await this.appShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an app by slug. Only updates the fields specified in the body.
     * Updates an app
     */
    async appUpdateRaw(requestParameters: AppUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppUpdateRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appUpdate().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling appUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppUpdateParamsToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppUpdateRespModelFromJSON(jsonValue));
    }

    /**
     * Updates an app by slug. Only updates the fields specified in the body.
     * Updates an app
     */
    async appUpdate(requestParameters: AppUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppUpdateRespModel> {
        const response = await this.appUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists only those branches of a specified Bitrise app that have existing builds.
     * List the branches with existing builds of an app\'s repository
     */
    async branchListRaw(requestParameters: BranchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BranchListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling branchList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/branches`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BranchListResponseModelFromJSON(jsonValue));
    }

    /**
     * Lists only those branches of a specified Bitrise app that have existing builds.
     * List the branches with existing builds of an app\'s repository
     */
    async branchList(requestParameters: BranchListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BranchListResponseModel> {
        const response = await this.branchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppListSortByEnum = {
    LastBuildAt: 'last_build_at',
    CreatedAt: 'created_at'
} as const;
export type AppListSortByEnum = typeof AppListSortByEnum[keyof typeof AppListSortByEnum];
/**
 * @export
 */
export const AppListByOrganizationSortByEnum = {
    LastBuildAt: 'last_build_at',
    CreatedAt: 'created_at'
} as const;
export type AppListByOrganizationSortByEnum = typeof AppListByOrganizationSortByEnum[keyof typeof AppListByOrganizationSortByEnum];
/**
 * @export
 */
export const AppListByUserSortByEnum = {
    LastBuildAt: 'last_build_at',
    CreatedAt: 'created_at'
} as const;
export type AppListByUserSortByEnum = typeof AppListByUserSortByEnum[keyof typeof AppListByUserSortByEnum];
/**
 * @export
 */
export const AppRolesQueryRoleNameEnum = {
    Admin: 'admin',
    Manager: 'manager',
    Member: 'member',
    PlatformEngineer: 'platform_engineer'
} as const;
export type AppRolesQueryRoleNameEnum = typeof AppRolesQueryRoleNameEnum[keyof typeof AppRolesQueryRoleNameEnum];
/**
 * @export
 */
export const AppRolesUpdateRoleNameEnum = {
    Admin: 'admin',
    Manager: 'manager',
    Member: 'member',
    PlatformEngineer: 'platform_engineer'
} as const;
export type AppRolesUpdateRoleNameEnum = typeof AppRolesUpdateRoleNameEnum[keyof typeof AppRolesUpdateRoleNameEnum];
