/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppSecretCreateRequest,
  AppSecretUpdateRequest,
  AppSecretsShow200Response,
  OrganizationSecretCreateRequest,
  SecretList200Response,
  SecretUpsertRequest,
  SecretValueGet200Response,
  ServiceDtoCreatedSecretNoValue,
  ServiceProxyErrorRespModel,
  ServiceStandardErrorRespModel,
} from '../models/index';
import {
    AppSecretCreateRequestFromJSON,
    AppSecretCreateRequestToJSON,
    AppSecretUpdateRequestFromJSON,
    AppSecretUpdateRequestToJSON,
    AppSecretsShow200ResponseFromJSON,
    AppSecretsShow200ResponseToJSON,
    OrganizationSecretCreateRequestFromJSON,
    OrganizationSecretCreateRequestToJSON,
    SecretList200ResponseFromJSON,
    SecretList200ResponseToJSON,
    SecretUpsertRequestFromJSON,
    SecretUpsertRequestToJSON,
    SecretValueGet200ResponseFromJSON,
    SecretValueGet200ResponseToJSON,
    ServiceDtoCreatedSecretNoValueFromJSON,
    ServiceDtoCreatedSecretNoValueToJSON,
    ServiceProxyErrorRespModelFromJSON,
    ServiceProxyErrorRespModelToJSON,
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
} from '../models/index';

export interface AppSecretCreateOperationRequest {
    appSlug: string;
    secret: AppSecretCreateRequest;
}

export interface AppSecretUpdateOperationRequest {
    appSlug: string;
    secretName: string;
    secret: AppSecretUpdateRequest;
}

export interface AppSecretsShowRequest {
    appSlug: string;
    secretName: string;
}

export interface OrganizationSecretCreateOperationRequest {
    orgSlug: string;
    secret: OrganizationSecretCreateRequest;
}

export interface OrganizationSecretDeleteRequest {
    orgSlug: string;
    secretName: string;
}

export interface OrganizationSecretUpdateRequest {
    orgSlug: string;
    secretName: string;
    secret: AppSecretUpdateRequest;
}

export interface OrganizationSecretsListRequest {
    orgSlug: string;
}

export interface OrganizationSecretsShowRequest {
    orgSlug: string;
    secretName: string;
}

export interface SecretDeleteRequest {
    appSlug: string;
    secretName: string;
}

export interface SecretListRequest {
    appSlug: string;
}

export interface SecretUpsertOperationRequest {
    appSlug: string;
    secretName: string;
    app: SecretUpsertRequest;
}

export interface SecretValueGetRequest {
    appSlug: string;
    secretName: string;
}

/**
 * 
 */
export class SecretsApi extends runtime.BaseAPI {

    /**
     * Create a new app secret
     * Create a new app secret
     */
    async appSecretCreateRaw(requestParameters: AppSecretCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDtoCreatedSecretNoValue>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appSecretCreate().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling appSecretCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppSecretCreateRequestToJSON(requestParameters['secret']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoCreatedSecretNoValueFromJSON(jsonValue));
    }

    /**
     * Create a new app secret
     * Create a new app secret
     */
    async appSecretCreate(requestParameters: AppSecretCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDtoCreatedSecretNoValue> {
        const response = await this.appSecretCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing app secret. If the secret is protected, only its value can be overridden.
     * Update an existing app secret
     */
    async appSecretUpdateRaw(requestParameters: AppSecretUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSecretsShow200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appSecretUpdate().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling appSecretUpdate().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling appSecretUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets/{secret-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppSecretUpdateRequestToJSON(requestParameters['secret']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSecretsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing app secret. If the secret is protected, only its value can be overridden.
     * Update an existing app secret
     */
    async appSecretUpdate(requestParameters: AppSecretUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSecretsShow200Response> {
        const response = await this.appSecretUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single app secret by name, including the value if not protected
     * Get a single app secret by name
     */
    async appSecretsShowRaw(requestParameters: AppSecretsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSecretsShow200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appSecretsShow().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling appSecretsShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets/{secret-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSecretsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single app secret by name, including the value if not protected
     * Get a single app secret by name
     */
    async appSecretsShow(requestParameters: AppSecretsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSecretsShow200Response> {
        const response = await this.appSecretsShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new organization secret
     * Create a new organization secret
     */
    async organizationSecretCreateRaw(requestParameters: OrganizationSecretCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDtoCreatedSecretNoValue>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationSecretCreate().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling organizationSecretCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/secrets`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationSecretCreateRequestToJSON(requestParameters['secret']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoCreatedSecretNoValueFromJSON(jsonValue));
    }

    /**
     * Create a new organization secret
     * Create a new organization secret
     */
    async organizationSecretCreate(requestParameters: OrganizationSecretCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDtoCreatedSecretNoValue> {
        const response = await this.organizationSecretCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a secret by name
     * Delete a secret by name
     */
    async organizationSecretDeleteRaw(requestParameters: OrganizationSecretDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationSecretDelete().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling organizationSecretDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/secrets/{secret-name}`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a secret by name
     * Delete a secret by name
     */
    async organizationSecretDelete(requestParameters: OrganizationSecretDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationSecretDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing secret. If the secret is protected, only its value can be overridden.
     * Update an existing secret
     */
    async organizationSecretUpdateRaw(requestParameters: OrganizationSecretUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSecretsShow200Response>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationSecretUpdate().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling organizationSecretUpdate().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling organizationSecretUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/secrets/{secret-name}`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppSecretUpdateRequestToJSON(requestParameters['secret']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSecretsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing secret. If the secret is protected, only its value can be overridden.
     * Update an existing secret
     */
    async organizationSecretUpdate(requestParameters: OrganizationSecretUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSecretsShow200Response> {
        const response = await this.organizationSecretUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the secrets of an organization
     * Get the secrets of an organization
     */
    async organizationSecretsListRaw(requestParameters: OrganizationSecretsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretList200Response>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationSecretsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/secrets`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the secrets of an organization
     * Get the secrets of an organization
     */
    async organizationSecretsList(requestParameters: OrganizationSecretsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretList200Response> {
        const response = await this.organizationSecretsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single secret by name, including the value if not protected
     * Get a single secret by name
     */
    async organizationSecretsShowRaw(requestParameters: OrganizationSecretsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSecretsShow200Response>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationSecretsShow().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling organizationSecretsShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/secrets/{secret-name}`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSecretsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single secret by name, including the value if not protected
     * Get a single secret by name
     */
    async organizationSecretsShow(requestParameters: OrganizationSecretsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSecretsShow200Response> {
        const response = await this.organizationSecretsShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an application secret. Requires administrator level privileges to the app.
     * Delete an application secret
     */
    async secretDeleteRaw(requestParameters: SecretDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling secretDelete().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling secretDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets/{secret-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an application secret. Requires administrator level privileges to the app.
     * Delete an application secret
     */
    async secretDelete(requestParameters: SecretDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.secretDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List the application secrets (with no values). Requires administrator level privileges to the app.
     * List the application secrets (with no values)
     */
    async secretListRaw(requestParameters: SecretListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretList200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling secretList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretList200ResponseFromJSON(jsonValue));
    }

    /**
     * List the application secrets (with no values). Requires administrator level privileges to the app.
     * List the application secrets (with no values)
     */
    async secretList(requestParameters: SecretListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretList200Response> {
        const response = await this.secretListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert an application secret. Requires administrator level privileges to the app.
     * Upsert an application secret
     * @deprecated
     */
    async secretUpsertRaw(requestParameters: SecretUpsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling secretUpsert().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling secretUpsert().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling secretUpsert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets/{secret-name}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SecretUpsertRequestToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upsert an application secret. Requires administrator level privileges to the app.
     * Upsert an application secret
     * @deprecated
     */
    async secretUpsert(requestParameters: SecretUpsertOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.secretUpsertRaw(requestParameters, initOverrides);
    }

    /**
     * Get the value of an (unprotected) application secrets. Requires administrator level privileges to the app.
     * Get the value of an (unprotected) application secrets
     * @deprecated
     */
    async secretValueGetRaw(requestParameters: SecretValueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretValueGet200Response>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling secretValueGet().'
            );
        }

        if (requestParameters['secretName'] == null) {
            throw new runtime.RequiredError(
                'secretName',
                'Required parameter "secretName" was null or undefined when calling secretValueGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/secrets/{secret-name}/value`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"secret-name"}}`, encodeURIComponent(String(requestParameters['secretName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretValueGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the value of an (unprotected) application secrets. Requires administrator level privileges to the app.
     * Get the value of an (unprotected) application secrets
     * @deprecated
     */
    async secretValueGet(requestParameters: SecretValueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretValueGet200Response> {
        const response = await this.secretValueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
