/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0ProjectFileStorageDocumentUpdateParams,
  V0ProjectFileStorageDownloadResponseModel,
  V0ProjectFileStorageListResponseModel,
  V0ProjectFileStorageResponseModel,
  V0ProjectFileStorageUploadParams,
  V0ProjectFileStorageUploadResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0ProjectFileStorageDocumentUpdateParamsFromJSON,
    V0ProjectFileStorageDocumentUpdateParamsToJSON,
    V0ProjectFileStorageDownloadResponseModelFromJSON,
    V0ProjectFileStorageDownloadResponseModelToJSON,
    V0ProjectFileStorageListResponseModelFromJSON,
    V0ProjectFileStorageListResponseModelToJSON,
    V0ProjectFileStorageResponseModelFromJSON,
    V0ProjectFileStorageResponseModelToJSON,
    V0ProjectFileStorageUploadParamsFromJSON,
    V0ProjectFileStorageUploadParamsToJSON,
    V0ProjectFileStorageUploadResponseModelFromJSON,
    V0ProjectFileStorageUploadResponseModelToJSON,
} from '../models/index';

export interface GenericProjectFileConfirmRequest {
    appSlug: string;
    genericProjectFileSlug: string;
}

export interface GenericProjectFileDeleteRequest {
    appSlug: string;
    genericProjectFileSlug: string;
}

export interface GenericProjectFileListRequest {
    appSlug: string;
    next?: string;
    limit?: number;
}

export interface GenericProjectFileShowRequest {
    appSlug: string;
    genericProjectFileSlug: string;
}

export interface GenericProjectFileUpdateRequest {
    appSlug: string;
    genericProjectFileSlug: string;
    genericProjectFile: V0ProjectFileStorageDocumentUpdateParams;
}

export interface GenericProjectFilesCreateRequest {
    appSlug: string;
    genericProjectFile: V0ProjectFileStorageUploadParams;
}

/**
 * 
 */
export class GenericProjectFileApi extends runtime.BaseAPI {

    /**
     * This is the last step of uploading a generic project file to Bitrise. Confirm the generic project file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
     * Confirm a generic project file upload
     */
    async genericProjectFileConfirmRaw(requestParameters: GenericProjectFileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFileConfirm().'
            );
        }

        if (requestParameters['genericProjectFileSlug'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFileSlug',
                'Required parameter "genericProjectFileSlug" was null or undefined when calling genericProjectFileConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"generic-project-file-slug"}}`, encodeURIComponent(String(requestParameters['genericProjectFileSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageResponseModelFromJSON(jsonValue));
    }

    /**
     * This is the last step of uploading a generic project file to Bitrise. Confirm the generic project file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
     * Confirm a generic project file upload
     */
    async genericProjectFileConfirm(requestParameters: GenericProjectFileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageResponseModel> {
        const response = await this.genericProjectFileConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app\'s generic project file. You can fetch an app\'s generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#deleting-a-file) guide.
     * Delete a generic project file
     */
    async genericProjectFileDeleteRaw(requestParameters: GenericProjectFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFileDelete().'
            );
        }

        if (requestParameters['genericProjectFileSlug'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFileSlug',
                'Required parameter "genericProjectFileSlug" was null or undefined when calling genericProjectFileDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files/{generic-project-file-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"generic-project-file-slug"}}`, encodeURIComponent(String(requestParameters['genericProjectFileSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete an app\'s generic project file. You can fetch an app\'s generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#deleting-a-file) guide.
     * Delete a generic project file
     */
    async genericProjectFileDelete(requestParameters: GenericProjectFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageResponseModel> {
        const response = await this.genericProjectFileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the generic project files that have been uploaded to a specific app. Read more in our [Listing the uploaded files of an app](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#listing-the-uploaded-files-of-an-app) guide.
     * Get a list of the generic project files
     */
    async genericProjectFileListRaw(requestParameters: GenericProjectFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFileList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the generic project files that have been uploaded to a specific app. Read more in our [Listing the uploaded files of an app](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#listing-the-uploaded-files-of-an-app) guide.
     * Get a list of the generic project files
     */
    async genericProjectFileList(requestParameters: GenericProjectFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageListResponseModel> {
        const response = await this.genericProjectFileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data of a specific generic project file to check its attributes and optionally modify them with the [PATCH /apps/](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-update) endpoint. Read more in our [Retrieving a specific file\'s data](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#retrieving-a-specific-files-data) guide.
     * Get a specific generic project file
     */
    async genericProjectFileShowRaw(requestParameters: GenericProjectFileShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageDownloadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFileShow().'
            );
        }

        if (requestParameters['genericProjectFileSlug'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFileSlug',
                'Required parameter "genericProjectFileSlug" was null or undefined when calling genericProjectFileShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files/{generic-project-file-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"generic-project-file-slug"}}`, encodeURIComponent(String(requestParameters['genericProjectFileSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageDownloadResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieve data of a specific generic project file to check its attributes and optionally modify them with the [PATCH /apps/](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-update) endpoint. Read more in our [Retrieving a specific file\'s data](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#retrieving-a-specific-files-data) guide.
     * Get a specific generic project file
     */
    async genericProjectFileShow(requestParameters: GenericProjectFileShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageDownloadResponseModel> {
        const response = await this.genericProjectFileShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a generic project file\'s attributes. You can fetch an app\'s generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Updating an uploaded file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#updating-an-uploaded-file) guide.
     * Update a generic project file
     */
    async genericProjectFileUpdateRaw(requestParameters: GenericProjectFileUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFileUpdate().'
            );
        }

        if (requestParameters['genericProjectFileSlug'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFileSlug',
                'Required parameter "genericProjectFileSlug" was null or undefined when calling genericProjectFileUpdate().'
            );
        }

        if (requestParameters['genericProjectFile'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFile',
                'Required parameter "genericProjectFile" was null or undefined when calling genericProjectFileUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files/{generic-project-file-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"generic-project-file-slug"}}`, encodeURIComponent(String(requestParameters['genericProjectFileSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0ProjectFileStorageDocumentUpdateParamsToJSON(requestParameters['genericProjectFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageResponseModelFromJSON(jsonValue));
    }

    /**
     * Update a generic project file\'s attributes. You can fetch an app\'s generic project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list) endpoint. Read more in our [Updating an uploaded file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#updating-an-uploaded-file) guide.
     * Update a generic project file
     */
    async genericProjectFileUpdate(requestParameters: GenericProjectFileUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageResponseModel> {
        const response = await this.genericProjectFileUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a temporary pre-signed upload URL (expires in 10 minutes) for the generic project file and upload it to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-confirm) endpoint. Read more in our [Creating and uploading files to Generic File Storage](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#creating-and-uploading-files-to-generic-file-storage) guide.
     * Create a generic project file
     */
    async genericProjectFilesCreateRaw(requestParameters: GenericProjectFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageUploadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling genericProjectFilesCreate().'
            );
        }

        if (requestParameters['genericProjectFile'] == null) {
            throw new runtime.RequiredError(
                'genericProjectFile',
                'Required parameter "genericProjectFile" was null or undefined when calling genericProjectFilesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/generic-project-files`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0ProjectFileStorageUploadParamsToJSON(requestParameters['genericProjectFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageUploadResponseModelFromJSON(jsonValue));
    }

    /**
     * Create a temporary pre-signed upload URL (expires in 10 minutes) for the generic project file and upload it to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-confirm) endpoint. Read more in our [Creating and uploading files to Generic File Storage](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#creating-and-uploading-files-to-generic-file-storage) guide.
     * Create a generic project file
     */
    async genericProjectFilesCreate(requestParameters: GenericProjectFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageUploadResponseModel> {
        const response = await this.genericProjectFilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
