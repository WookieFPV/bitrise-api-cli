/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0ArtifactDeleteResponseModel,
  V0ArtifactListResponseModel,
  V0ArtifactShowResponseModel,
  V0ArtifactUpdateParams,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0ArtifactDeleteResponseModelFromJSON,
    V0ArtifactDeleteResponseModelToJSON,
    V0ArtifactListResponseModelFromJSON,
    V0ArtifactListResponseModelToJSON,
    V0ArtifactShowResponseModelFromJSON,
    V0ArtifactShowResponseModelToJSON,
    V0ArtifactUpdateParamsFromJSON,
    V0ArtifactUpdateParamsToJSON,
} from '../models/index';

export interface ArtifactDeleteRequest {
    appSlug: string;
    buildSlug: string;
    artifactSlug: string;
}

export interface ArtifactListRequest {
    appSlug: string;
    buildSlug: string;
    next?: string;
    limit?: number;
}

export interface ArtifactShowRequest {
    appSlug: string;
    buildSlug: string;
    artifactSlug: string;
    download?: number;
}

export interface ArtifactUpdateRequest {
    appSlug: string;
    buildSlug: string;
    artifactSlug: string;
    artifactParams: V0ArtifactUpdateParams;
}

/**
 * 
 */
export class BuildArtifactApi extends runtime.BaseAPI {

    /**
     * Delete a build artifact of an app\'s build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     * Delete a build artifact
     */
    async artifactDeleteRaw(requestParameters: ArtifactDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ArtifactDeleteResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling artifactDelete().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling artifactDelete().'
            );
        }

        if (requestParameters['artifactSlug'] == null) {
            throw new runtime.RequiredError(
                'artifactSlug',
                'Required parameter "artifactSlug" was null or undefined when calling artifactDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))).replace(`{${"artifact-slug"}}`, encodeURIComponent(String(requestParameters['artifactSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ArtifactDeleteResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete a build artifact of an app\'s build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     * Delete a build artifact
     */
    async artifactDelete(requestParameters: ArtifactDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ArtifactDeleteResponseModel> {
        const response = await this.artifactDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all build artifacts that have been generated for an app\'s build. This endpoint can retrieve artifacts from the archive as well. You can use the created build artifact slugs from the response output to retrieve data of a specific build artifact with the [GET/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-show) endpoint or update a build artifact with the [PATCH/apps](https://api-docs.bitrise.io/#/build-artifact/artifact-update) endpoint.
     * Get a list of all build artifacts
     */
    async artifactListRaw(requestParameters: ArtifactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ArtifactListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling artifactList().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling artifactList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/artifacts`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ArtifactListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all build artifacts that have been generated for an app\'s build. This endpoint can retrieve artifacts from the archive as well. You can use the created build artifact slugs from the response output to retrieve data of a specific build artifact with the [GET/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-show) endpoint or update a build artifact with the [PATCH/apps](https://api-docs.bitrise.io/#/build-artifact/artifact-update) endpoint.
     * Get a list of all build artifacts
     */
    async artifactList(requestParameters: ArtifactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ArtifactListResponseModel> {
        const response = await this.artifactListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data of a specific build artifact. The endpoint can retrieve archived artifacts as well. The response output contains a time-limited download url (expires in 10 minutes) and a public install-page URL. You can view the build artifact with both URLs, but the public install-page url will not work unless you [enable it](https://devcenter.bitrise.io/tutorials/deploy/bitrise-app-deployment/#enabling-public-page-for-the-app).
     * Get a specific build artifact
     */
    async artifactShowRaw(requestParameters: ArtifactShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ArtifactShowResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling artifactShow().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling artifactShow().'
            );
        }

        if (requestParameters['artifactSlug'] == null) {
            throw new runtime.RequiredError(
                'artifactSlug',
                'Required parameter "artifactSlug" was null or undefined when calling artifactShow().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['download'] != null) {
            queryParameters['download'] = requestParameters['download'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))).replace(`{${"artifact-slug"}}`, encodeURIComponent(String(requestParameters['artifactSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ArtifactShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieve data of a specific build artifact. The endpoint can retrieve archived artifacts as well. The response output contains a time-limited download url (expires in 10 minutes) and a public install-page URL. You can view the build artifact with both URLs, but the public install-page url will not work unless you [enable it](https://devcenter.bitrise.io/tutorials/deploy/bitrise-app-deployment/#enabling-public-page-for-the-app).
     * Get a specific build artifact
     */
    async artifactShow(requestParameters: ArtifactShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ArtifactShowResponseModel> {
        const response = await this.artifactShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the `is_public_page_enabled` attribute of your app\'s build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [GET /apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     * Update a build artifact
     */
    async artifactUpdateRaw(requestParameters: ArtifactUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ArtifactShowResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling artifactUpdate().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling artifactUpdate().'
            );
        }

        if (requestParameters['artifactSlug'] == null) {
            throw new runtime.RequiredError(
                'artifactSlug',
                'Required parameter "artifactSlug" was null or undefined when calling artifactUpdate().'
            );
        }

        if (requestParameters['artifactParams'] == null) {
            throw new runtime.RequiredError(
                'artifactParams',
                'Required parameter "artifactParams" was null or undefined when calling artifactUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))).replace(`{${"artifact-slug"}}`, encodeURIComponent(String(requestParameters['artifactSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0ArtifactUpdateParamsToJSON(requestParameters['artifactParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ArtifactShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Update the `is_public_page_enabled` attribute of your app\'s build. The required parameters are app slug, build slug and artifact slug. You can fetch the build artifact slug if you first list all build artifacts of an app with the [GET /apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list) endpoint.
     * Update a build artifact
     */
    async artifactUpdate(requestParameters: ArtifactUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ArtifactShowResponseModel> {
        const response = await this.artifactUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
