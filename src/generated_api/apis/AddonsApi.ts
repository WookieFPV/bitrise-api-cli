/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0AddonsListResponseModel,
  V0AddonsShowResponseModel,
  V0AppAddOnsListResponseModel,
  V0OwnerAddOnsListResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0AddonsListResponseModelFromJSON,
    V0AddonsListResponseModelToJSON,
    V0AddonsShowResponseModelFromJSON,
    V0AddonsShowResponseModelToJSON,
    V0AppAddOnsListResponseModelFromJSON,
    V0AppAddOnsListResponseModelToJSON,
    V0OwnerAddOnsListResponseModelFromJSON,
    V0OwnerAddOnsListResponseModelToJSON,
} from '../models/index';

export interface AddonListByAppRequest {
    appSlug: string;
}

export interface AddonListByOrganizationRequest {
    organizationSlug: string;
}

export interface AddonListByUserRequest {
    userSlug: string;
}

export interface AddonsShowRequest {
    addonId: string;
}

/**
 * 
 */
export class AddonsApi extends runtime.BaseAPI {

    /**
     * List all the provisioned addons for the authorized apps
     * Get list of the addons for apps
     */
    async addonListByAppRaw(requestParameters: AddonListByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppAddOnsListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling addonListByApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/addons`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppAddOnsListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the provisioned addons for the authorized apps
     * Get list of the addons for apps
     */
    async addonListByApp(requestParameters: AddonListByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppAddOnsListResponseModel> {
        const response = await this.addonListByAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the provisioned addons for organization
     * Get list of the addons for organization
     */
    async addonListByOrganizationRaw(requestParameters: AddonListByOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OwnerAddOnsListResponseModel>> {
        if (requestParameters['organizationSlug'] == null) {
            throw new runtime.RequiredError(
                'organizationSlug',
                'Required parameter "organizationSlug" was null or undefined when calling addonListByOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{organization-slug}/addons`.replace(`{${"organization-slug"}}`, encodeURIComponent(String(requestParameters['organizationSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OwnerAddOnsListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the provisioned addons for organization
     * Get list of the addons for organization
     */
    async addonListByOrganization(requestParameters: AddonListByOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OwnerAddOnsListResponseModel> {
        const response = await this.addonListByOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the provisioned addons for the authenticated user
     * Get list of the addons for user
     */
    async addonListByUserRaw(requestParameters: AddonListByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OwnerAddOnsListResponseModel>> {
        if (requestParameters['userSlug'] == null) {
            throw new runtime.RequiredError(
                'userSlug',
                'Required parameter "userSlug" was null or undefined when calling addonListByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/users/{user-slug}/addons`.replace(`{${"user-slug"}}`, encodeURIComponent(String(requestParameters['userSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OwnerAddOnsListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the provisioned addons for the authenticated user
     * Get list of the addons for user
     */
    async addonListByUser(requestParameters: AddonListByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OwnerAddOnsListResponseModel> {
        const response = await this.addonListByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the available Bitrise addons
     * Get list of available Bitrise addons
     */
    async addonsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AddonsListResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AddonsListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the available Bitrise addons
     * Get list of available Bitrise addons
     */
    async addonsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AddonsListResponseModel> {
        const response = await this.addonsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Show details of a specific Bitrise addon
     * Get a specific Bitrise addon
     */
    async addonsShowRaw(requestParameters: AddonsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AddonsShowResponseModel>> {
        if (requestParameters['addonId'] == null) {
            throw new runtime.RequiredError(
                'addonId',
                'Required parameter "addonId" was null or undefined when calling addonsShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addons/{addon-id}`.replace(`{${"addon-id"}}`, encodeURIComponent(String(requestParameters['addonId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AddonsShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Show details of a specific Bitrise addon
     * Get a specific Bitrise addon
     */
    async addonsShow(requestParameters: AddonsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AddonsShowResponseModel> {
        const response = await this.addonsShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
