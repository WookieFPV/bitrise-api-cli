/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0BuildCertificateDownloadResponseModel,
  V0BuildCertificateListResponseModel,
  V0BuildCertificateResponseModel,
  V0BuildCertificateUpdateParams,
  V0BuildCertificateUploadParams,
  V0BuildCertificateUploadResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0BuildCertificateDownloadResponseModelFromJSON,
    V0BuildCertificateDownloadResponseModelToJSON,
    V0BuildCertificateListResponseModelFromJSON,
    V0BuildCertificateListResponseModelToJSON,
    V0BuildCertificateResponseModelFromJSON,
    V0BuildCertificateResponseModelToJSON,
    V0BuildCertificateUpdateParamsFromJSON,
    V0BuildCertificateUpdateParamsToJSON,
    V0BuildCertificateUploadParamsFromJSON,
    V0BuildCertificateUploadParamsToJSON,
    V0BuildCertificateUploadResponseModelFromJSON,
    V0BuildCertificateUploadResponseModelToJSON,
} from '../models/index';

export interface BuildCertificateConfirmRequest {
    appSlug: string;
    buildCertificateSlug: string;
}

export interface BuildCertificateCreateRequest {
    appSlug: string;
    buildCertificate: V0BuildCertificateUploadParams;
}

export interface BuildCertificateDeleteRequest {
    appSlug: string;
    buildCertificateSlug: string;
}

export interface BuildCertificateListRequest {
    appSlug: string;
    next?: string;
    limit?: number;
}

export interface BuildCertificateShowRequest {
    appSlug: string;
    buildCertificateSlug: string;
}

export interface BuildCertificateUpdateRequest {
    appSlug: string;
    buildCertificateSlug: string;
    buildCertificate: V0BuildCertificateUpdateParams;
}

/**
 * 
 */
export class BuildCertificateApi extends runtime.BaseAPI {

    /**
     * This is the last step of uploading a build certificate to Bitrise. Confirm the build certificate upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Confirm a build certificate upload
     */
    async buildCertificateConfirmRaw(requestParameters: BuildCertificateConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateConfirm().'
            );
        }

        if (requestParameters['buildCertificateSlug'] == null) {
            throw new runtime.RequiredError(
                'buildCertificateSlug',
                'Required parameter "buildCertificateSlug" was null or undefined when calling buildCertificateConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-certificate-slug"}}`, encodeURIComponent(String(requestParameters['buildCertificateSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateResponseModelFromJSON(jsonValue));
    }

    /**
     * This is the last step of uploading a build certificate to Bitrise. Confirm the build certificate upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Confirm a build certificate upload
     */
    async buildCertificateConfirm(requestParameters: BuildCertificateConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateResponseModel> {
        const response = await this.buildCertificateConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a temporary pre-signed upload URL for the build certificate and upload the file to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     * Create a build certificate
     */
    async buildCertificateCreateRaw(requestParameters: BuildCertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateUploadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateCreate().'
            );
        }

        if (requestParameters['buildCertificate'] == null) {
            throw new runtime.RequiredError(
                'buildCertificate',
                'Required parameter "buildCertificate" was null or undefined when calling buildCertificateCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0BuildCertificateUploadParamsToJSON(requestParameters['buildCertificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateUploadResponseModelFromJSON(jsonValue));
    }

    /**
     * Create a temporary pre-signed upload URL for the build certificate and upload the file to AWS with a simple `curl` request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     * Create a build certificate
     */
    async buildCertificateCreate(requestParameters: BuildCertificateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateUploadResponseModel> {
        const response = await this.buildCertificateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app\'s build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     * Delete a build certificate
     */
    async buildCertificateDeleteRaw(requestParameters: BuildCertificateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateDelete().'
            );
        }

        if (requestParameters['buildCertificateSlug'] == null) {
            throw new runtime.RequiredError(
                'buildCertificateSlug',
                'Required parameter "buildCertificateSlug" was null or undefined when calling buildCertificateDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates/{build-certificate-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-certificate-slug"}}`, encodeURIComponent(String(requestParameters['buildCertificateSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete an app\'s build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     * Delete a build certificate
     */
    async buildCertificateDelete(requestParameters: BuildCertificateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateResponseModel> {
        const response = await this.buildCertificateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the build certificates that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     * Get a list of the build certificates
     */
    async buildCertificateListRaw(requestParameters: BuildCertificateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the build certificates that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     * Get a list of the build certificates
     */
    async buildCertificateList(requestParameters: BuildCertificateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateListResponseModel> {
        const response = await this.buildCertificateListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data of a specific build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Getting a specific iOS code signing file\'s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     * Get a specific build certificate
     */
    async buildCertificateShowRaw(requestParameters: BuildCertificateShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateDownloadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateShow().'
            );
        }

        if (requestParameters['buildCertificateSlug'] == null) {
            throw new runtime.RequiredError(
                'buildCertificateSlug',
                'Required parameter "buildCertificateSlug" was null or undefined when calling buildCertificateShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates/{build-certificate-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-certificate-slug"}}`, encodeURIComponent(String(requestParameters['buildCertificateSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateDownloadResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieve data of a specific build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Getting a specific iOS code signing file\'s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     * Get a specific build certificate
     */
    async buildCertificateShow(requestParameters: BuildCertificateShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateDownloadResponseModel> {
        const response = await this.buildCertificateShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an uploaded build certificate\'s attributes. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Update a build certificate
     */
    async buildCertificateUpdateRaw(requestParameters: BuildCertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildCertificateResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildCertificateUpdate().'
            );
        }

        if (requestParameters['buildCertificateSlug'] == null) {
            throw new runtime.RequiredError(
                'buildCertificateSlug',
                'Required parameter "buildCertificateSlug" was null or undefined when calling buildCertificateUpdate().'
            );
        }

        if (requestParameters['buildCertificate'] == null) {
            throw new runtime.RequiredError(
                'buildCertificate',
                'Required parameter "buildCertificate" was null or undefined when calling buildCertificateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-certificates/{build-certificate-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-certificate-slug"}}`, encodeURIComponent(String(requestParameters['buildCertificateSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0BuildCertificateUpdateParamsToJSON(requestParameters['buildCertificate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildCertificateResponseModelFromJSON(jsonValue));
    }

    /**
     * Update an uploaded build certificate\'s attributes. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Update a build certificate
     */
    async buildCertificateUpdate(requestParameters: BuildCertificateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildCertificateResponseModel> {
        const response = await this.buildCertificateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
