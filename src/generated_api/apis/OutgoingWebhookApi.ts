/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0AppWebhookCreateParams,
  V0AppWebhookCreatedResponseModel,
  V0AppWebhookDeletedResponseModel,
  V0AppWebhookListResponseModel,
  V0AppWebhookResponseModel,
  V0AppWebhookUpdateParams,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0AppWebhookCreateParamsFromJSON,
    V0AppWebhookCreateParamsToJSON,
    V0AppWebhookCreatedResponseModelFromJSON,
    V0AppWebhookCreatedResponseModelToJSON,
    V0AppWebhookDeletedResponseModelFromJSON,
    V0AppWebhookDeletedResponseModelToJSON,
    V0AppWebhookListResponseModelFromJSON,
    V0AppWebhookListResponseModelToJSON,
    V0AppWebhookResponseModelFromJSON,
    V0AppWebhookResponseModelToJSON,
    V0AppWebhookUpdateParamsFromJSON,
    V0AppWebhookUpdateParamsToJSON,
} from '../models/index';

export interface OutgoingWebhookCreateRequest {
    appSlug: string;
    appWebhookCreateParams: V0AppWebhookCreateParams;
}

export interface OutgoingWebhookDeleteRequest {
    appSlug: string;
    appWebhookSlug: string;
}

export interface OutgoingWebhookListRequest {
    appSlug: string;
    next?: string;
    limit?: number;
}

export interface OutgoingWebhookUpdateRequest {
    appSlug: string;
    appWebhookSlug: string;
    appWebhookUpdateParams: V0AppWebhookUpdateParams;
}

/**
 * 
 */
export class OutgoingWebhookApi extends runtime.BaseAPI {

    /**
     * Create an outgoing webhook for a specified Bitrise app: this can be used to send build events to a specified URL with custom headers. Currently, only build events can trigger outgoing webhooks.
     * Create an outgoing webhook for an app
     */
    async outgoingWebhookCreateRaw(requestParameters: OutgoingWebhookCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppWebhookCreatedResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling outgoingWebhookCreate().'
            );
        }

        if (requestParameters['appWebhookCreateParams'] == null) {
            throw new runtime.RequiredError(
                'appWebhookCreateParams',
                'Required parameter "appWebhookCreateParams" was null or undefined when calling outgoingWebhookCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/outgoing-webhooks`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppWebhookCreateParamsToJSON(requestParameters['appWebhookCreateParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppWebhookCreatedResponseModelFromJSON(jsonValue));
    }

    /**
     * Create an outgoing webhook for a specified Bitrise app: this can be used to send build events to a specified URL with custom headers. Currently, only build events can trigger outgoing webhooks.
     * Create an outgoing webhook for an app
     */
    async outgoingWebhookCreate(requestParameters: OutgoingWebhookCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppWebhookCreatedResponseModel> {
        const response = await this.outgoingWebhookCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing outgoing webhook for a specified Bitrise app.
     * Delete an outgoing webhook of an app
     */
    async outgoingWebhookDeleteRaw(requestParameters: OutgoingWebhookDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppWebhookDeletedResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling outgoingWebhookDelete().'
            );
        }

        if (requestParameters['appWebhookSlug'] == null) {
            throw new runtime.RequiredError(
                'appWebhookSlug',
                'Required parameter "appWebhookSlug" was null or undefined when calling outgoingWebhookDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"app-webhook-slug"}}`, encodeURIComponent(String(requestParameters['appWebhookSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppWebhookDeletedResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete an existing outgoing webhook for a specified Bitrise app.
     * Delete an outgoing webhook of an app
     */
    async outgoingWebhookDelete(requestParameters: OutgoingWebhookDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppWebhookDeletedResponseModel> {
        const response = await this.outgoingWebhookDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the outgoing webhooks registered for a specified Bitrise app. This returns all the relevant data of the webhook, including the slug of the webhook and its URL.
     * List the outgoing webhooks of an app
     */
    async outgoingWebhookListRaw(requestParameters: OutgoingWebhookListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppWebhookListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling outgoingWebhookList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/outgoing-webhooks`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppWebhookListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the outgoing webhooks registered for a specified Bitrise app. This returns all the relevant data of the webhook, including the slug of the webhook and its URL.
     * List the outgoing webhooks of an app
     */
    async outgoingWebhookList(requestParameters: OutgoingWebhookListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppWebhookListResponseModel> {
        const response = await this.outgoingWebhookListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing outgoing webhook (URL, events, secrets and headers) for a specified Bitrise app. Even if you do not want to change one of the parameters, you still have to provide that parameter as well: simply use its existing value.
     * Update an outgoing webhook of an app
     */
    async outgoingWebhookUpdateRaw(requestParameters: OutgoingWebhookUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppWebhookResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling outgoingWebhookUpdate().'
            );
        }

        if (requestParameters['appWebhookSlug'] == null) {
            throw new runtime.RequiredError(
                'appWebhookSlug',
                'Required parameter "appWebhookSlug" was null or undefined when calling outgoingWebhookUpdate().'
            );
        }

        if (requestParameters['appWebhookUpdateParams'] == null) {
            throw new runtime.RequiredError(
                'appWebhookUpdateParams',
                'Required parameter "appWebhookUpdateParams" was null or undefined when calling outgoingWebhookUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"app-webhook-slug"}}`, encodeURIComponent(String(requestParameters['appWebhookSlug']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppWebhookUpdateParamsToJSON(requestParameters['appWebhookUpdateParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppWebhookResponseModelFromJSON(jsonValue));
    }

    /**
     * Update an existing outgoing webhook (URL, events, secrets and headers) for a specified Bitrise app. Even if you do not want to change one of the parameters, you still have to provide that parameter as well: simply use its existing value.
     * Update an outgoing webhook of an app
     */
    async outgoingWebhookUpdate(requestParameters: OutgoingWebhookUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppWebhookResponseModel> {
        const response = await this.outgoingWebhookUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
