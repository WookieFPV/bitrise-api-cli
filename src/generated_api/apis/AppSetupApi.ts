/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceProxyErrorRespModel,
  ServiceStandardErrorRespModel,
  V0AppConfigRequestParam,
  V0AppFinishParams,
  V0AppFinishRespModel,
  V0AppRespModel,
  V0AppUploadParams,
  V0BitriseYMLConfigGetResponse,
  V0BitriseYMLConfigUpdateParams,
  V0SSHKeyRespModel,
  V0SSHKeyUploadParams,
  V0WebhookRespModel,
} from '../models/index';
import {
    ServiceProxyErrorRespModelFromJSON,
    ServiceProxyErrorRespModelToJSON,
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0AppConfigRequestParamFromJSON,
    V0AppConfigRequestParamToJSON,
    V0AppFinishParamsFromJSON,
    V0AppFinishParamsToJSON,
    V0AppFinishRespModelFromJSON,
    V0AppFinishRespModelToJSON,
    V0AppRespModelFromJSON,
    V0AppRespModelToJSON,
    V0AppUploadParamsFromJSON,
    V0AppUploadParamsToJSON,
    V0BitriseYMLConfigGetResponseFromJSON,
    V0BitriseYMLConfigGetResponseToJSON,
    V0BitriseYMLConfigUpdateParamsFromJSON,
    V0BitriseYMLConfigUpdateParamsToJSON,
    V0SSHKeyRespModelFromJSON,
    V0SSHKeyRespModelToJSON,
    V0SSHKeyUploadParamsFromJSON,
    V0SSHKeyUploadParamsToJSON,
    V0WebhookRespModelFromJSON,
    V0WebhookRespModelToJSON,
} from '../models/index';

export interface AppConfigCreateRequest {
    appSlug: string;
    appConfig: V0AppConfigRequestParam;
}

export interface AppCreateRequest {
    app: V0AppUploadParams;
}

export interface AppFinishRequest {
    appSlug: string;
    app: V0AppFinishParams;
}

export interface AppSetupBitriseYmlConfigGetRequest {
    appSlug: string;
}

export interface AppSetupBitriseYmlConfigUpdateRequest {
    appSlug: string;
    app: V0BitriseYMLConfigUpdateParams;
}

export interface AppWebhookCreateRequest {
    appSlug: string;
}

export interface SshKeyCreateRequest {
    appSlug: string;
    sshKey: V0SSHKeyUploadParams;
}

/**
 * 
 */
export class AppSetupApi extends runtime.BaseAPI {

    /**
     * Upload a new bitrise.yml for your application.
     * Upload a new bitrise.yml for your application.
     */
    async appConfigCreateRaw(requestParameters: AppConfigCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appConfigCreate().'
            );
        }

        if (requestParameters['appConfig'] == null) {
            throw new runtime.RequiredError(
                'appConfig',
                'Required parameter "appConfig" was null or undefined when calling appConfigCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/bitrise.yml`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppConfigRequestParamToJSON(requestParameters['appConfig']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Upload a new bitrise.yml for your application.
     * Upload a new bitrise.yml for your application.
     */
    async appConfigCreate(requestParameters: AppConfigCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.appConfigCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new app to Bitrise. This is the first step of the app registration process. To successfully set it up, you need to provide the required app parameters: the repository URL and the isPublic field. Read more about the app creation process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).
     * Add a new app
     */
    async appCreateRaw(requestParameters: AppCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppRespModel>> {
        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling appCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppUploadParamsToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppRespModelFromJSON(jsonValue));
    }

    /**
     * Add a new app to Bitrise. This is the first step of the app registration process. To successfully set it up, you need to provide the required app parameters: the repository URL and the isPublic field. Read more about the app creation process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).
     * Add a new app
     */
    async appCreate(requestParameters: AppCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppRespModel> {
        const response = await this.appCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save the application after registering it on Bitrise and registering an SSH key (and, optionally, adding a webhook). With this endpoint you can define the initial configuration, define application-level environment variables, determine the project type, and set an Organization to be the owner of the app. Read more about the app registration process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).
     * Save the application at the end of the app registration process
     */
    async appFinishRaw(requestParameters: AppFinishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0AppFinishRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appFinish().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling appFinish().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/finish`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0AppFinishParamsToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0AppFinishRespModelFromJSON(jsonValue));
    }

    /**
     * Save the application after registering it on Bitrise and registering an SSH key (and, optionally, adding a webhook). With this endpoint you can define the initial configuration, define application-level environment variables, determine the project type, and set an Organization to be the owner of the app. Read more about the app registration process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).
     * Save the application at the end of the app registration process
     */
    async appFinish(requestParameters: AppFinishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0AppFinishRespModel> {
        const response = await this.appFinishRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getting the location of the application\'s bitrise.yaml. Requires administrator level privileges to the app.
     * Getting the location of the application\'s bitrise.yaml
     */
    async appSetupBitriseYmlConfigGetRaw(requestParameters: AppSetupBitriseYmlConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BitriseYMLConfigGetResponse>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appSetupBitriseYmlConfigGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/bitrise.yml/config`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BitriseYMLConfigGetResponseFromJSON(jsonValue));
    }

    /**
     * Getting the location of the application\'s bitrise.yaml. Requires administrator level privileges to the app.
     * Getting the location of the application\'s bitrise.yaml
     */
    async appSetupBitriseYmlConfigGet(requestParameters: AppSetupBitriseYmlConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BitriseYMLConfigGetResponse> {
        const response = await this.appSetupBitriseYmlConfigGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changing the location of the application\'s bitrise.yaml. Requires administrator level privileges to the app.
     * Changing the location of the application\'s bitrise.yaml
     */
    async appSetupBitriseYmlConfigUpdateRaw(requestParameters: AppSetupBitriseYmlConfigUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appSetupBitriseYmlConfigUpdate().'
            );
        }

        if (requestParameters['app'] == null) {
            throw new runtime.RequiredError(
                'app',
                'Required parameter "app" was null or undefined when calling appSetupBitriseYmlConfigUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/bitrise.yml/config`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V0BitriseYMLConfigUpdateParamsToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changing the location of the application\'s bitrise.yaml. Requires administrator level privileges to the app.
     * Changing the location of the application\'s bitrise.yaml
     */
    async appSetupBitriseYmlConfigUpdate(requestParameters: AppSetupBitriseYmlConfigUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appSetupBitriseYmlConfigUpdateRaw(requestParameters, initOverrides);
    }

    /**
     * [Register an incoming webhook](https://devcenter.bitrise.io/api/incoming-and-outgoing-webhooks/#incoming-webhooks) for a specific application. You can do this during the app registration process or at any other time in an app\'s life. When calling this endpoint, a webhook is registered at your git provider: this is necessary to automatically trigger builds on Bitrise.
     * Register an incoming webhook for a specific application
     */
    async appWebhookCreateRaw(requestParameters: AppWebhookCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0WebhookRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling appWebhookCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/register-webhook`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0WebhookRespModelFromJSON(jsonValue));
    }

    /**
     * [Register an incoming webhook](https://devcenter.bitrise.io/api/incoming-and-outgoing-webhooks/#incoming-webhooks) for a specific application. You can do this during the app registration process or at any other time in an app\'s life. When calling this endpoint, a webhook is registered at your git provider: this is necessary to automatically trigger builds on Bitrise.
     * Register an incoming webhook for a specific application
     */
    async appWebhookCreate(requestParameters: AppWebhookCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0WebhookRespModel> {
        const response = await this.appWebhookCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add an SSH-key to a specific app. After creating an app, you need to register the SSH key so that Bitrise will be able to access and clone your repository during the build process. This requires the app slug of your newly created app.
     * Add an SSH-key to a specific app
     */
    async sshKeyCreateRaw(requestParameters: SshKeyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0SSHKeyRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling sshKeyCreate().'
            );
        }

        if (requestParameters['sshKey'] == null) {
            throw new runtime.RequiredError(
                'sshKey',
                'Required parameter "sshKey" was null or undefined when calling sshKeyCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/register-ssh-key`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0SSHKeyUploadParamsToJSON(requestParameters['sshKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0SSHKeyRespModelFromJSON(jsonValue));
    }

    /**
     * Add an SSH-key to a specific app. After creating an app, you need to register the SSH key so that Bitrise will be able to access and clone your repository during the build process. This requires the app slug of your newly created app.
     * Add an SSH-key to a specific app
     */
    async sshKeyCreate(requestParameters: SshKeyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0SSHKeyRespModel> {
        const response = await this.sshKeyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
