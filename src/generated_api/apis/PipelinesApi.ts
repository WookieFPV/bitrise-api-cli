/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0PipelineAbortParams,
  V0PipelineListAllResponseModel,
  V0PipelineListResponseModel,
  V0PipelineRebuildParams,
  V0PipelineShowResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0PipelineAbortParamsFromJSON,
    V0PipelineAbortParamsToJSON,
    V0PipelineListAllResponseModelFromJSON,
    V0PipelineListAllResponseModelToJSON,
    V0PipelineListResponseModelFromJSON,
    V0PipelineListResponseModelToJSON,
    V0PipelineRebuildParamsFromJSON,
    V0PipelineRebuildParamsToJSON,
    V0PipelineShowResponseModelFromJSON,
    V0PipelineShowResponseModelToJSON,
} from '../models/index';

export interface PipelineAbortRequest {
    appSlug: string;
    pipelineId: string;
    pipelineAbortParams: V0PipelineAbortParams;
}

export interface PipelineListRequest {
    appSlug: string;
    after?: string;
    before?: string;
    branch?: string;
    buildNumber?: number;
    commitMessage?: string;
    limit?: number;
    next?: string;
    pipeline?: string;
    status?: string;
    triggerEventType?: string;
    workflow?: string;
}

export interface PipelineListAllRequest {
    ownerSlug?: string;
    status?: string;
    next?: string;
    limit?: number;
}

export interface PipelineRebuildRequest {
    appSlug: string;
    pipelineId: string;
    pipelineRebuildParams: V0PipelineRebuildParams;
}

export interface PipelineShowRequest {
    appSlug: string;
    pipelineId: string;
}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Aborts a pipeline. You need to provide the app slug and the id of the pipeline. You can add an abort reason, choose to skip notifications and make the abort with success state.
     * Aborts a pipeline
     */
    async pipelineAbortRaw(requestParameters: PipelineAbortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling pipelineAbort().'
            );
        }

        if (requestParameters['pipelineId'] == null) {
            throw new runtime.RequiredError(
                'pipelineId',
                'Required parameter "pipelineId" was null or undefined when calling pipelineAbort().'
            );
        }

        if (requestParameters['pipelineAbortParams'] == null) {
            throw new runtime.RequiredError(
                'pipelineAbortParams',
                'Required parameter "pipelineAbortParams" was null or undefined when calling pipelineAbort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/pipelines/{pipeline-id}/abort`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"pipeline-id"}}`, encodeURIComponent(String(requestParameters['pipelineId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0PipelineAbortParamsToJSON(requestParameters['pipelineAbortParams']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aborts a pipeline. You need to provide the app slug and the id of the pipeline. You can add an abort reason, choose to skip notifications and make the abort with success state.
     * Aborts a pipeline
     */
    async pipelineAbort(requestParameters: PipelineAbortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipelineAbortRaw(requestParameters, initOverrides);
    }

    /**
     * List all the pipelines and standalone builds of a specified Bitrise app. Set parameters to filter pipelines: for example, you can search for pipelines/standalone builds run with a given workflow name or all pipelines/standalone builds that were triggered by Pull Requests. It returns all the relevant data of the pipelines/standalone builds.
     * List all pipelines and standalone builds of an app
     */
    async pipelineListRaw(requestParameters: PipelineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0PipelineListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling pipelineList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['buildNumber'] != null) {
            queryParameters['build_number'] = requestParameters['buildNumber'];
        }

        if (requestParameters['commitMessage'] != null) {
            queryParameters['commit_message'] = requestParameters['commitMessage'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['pipeline'] != null) {
            queryParameters['pipeline'] = requestParameters['pipeline'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['triggerEventType'] != null) {
            queryParameters['trigger_event_type'] = requestParameters['triggerEventType'];
        }

        if (requestParameters['workflow'] != null) {
            queryParameters['workflow'] = requestParameters['workflow'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/pipelines`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0PipelineListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the pipelines and standalone builds of a specified Bitrise app. Set parameters to filter pipelines: for example, you can search for pipelines/standalone builds run with a given workflow name or all pipelines/standalone builds that were triggered by Pull Requests. It returns all the relevant data of the pipelines/standalone builds.
     * List all pipelines and standalone builds of an app
     */
    async pipelineList(requestParameters: PipelineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0PipelineListResponseModel> {
        const response = await this.pipelineListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the Bitrise pipelines/standalone builds that can be accessed with the authenticated account. Filter pipelines/standalone builds based on their owner, using the owner slug, or the status of the pipeline/standalone build.
     * List all pipelines/standalone builds
     */
    async pipelineListAllRaw(requestParameters: PipelineListAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0PipelineListAllResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['ownerSlug'] != null) {
            queryParameters['owner_slug'] = requestParameters['ownerSlug'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/pipelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0PipelineListAllResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the Bitrise pipelines/standalone builds that can be accessed with the authenticated account. Filter pipelines/standalone builds based on their owner, using the owner slug, or the status of the pipeline/standalone build.
     * List all pipelines/standalone builds
     */
    async pipelineListAll(requestParameters: PipelineListAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0PipelineListAllResponseModel> {
        const response = await this.pipelineListAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rebuilds a pipeline. You can rebuild the whole pipeline or only the unsuccessful and subsequent workflows by setting the partial flag to true.
     * Rebuilds a pipeline
     */
    async pipelineRebuildRaw(requestParameters: PipelineRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling pipelineRebuild().'
            );
        }

        if (requestParameters['pipelineId'] == null) {
            throw new runtime.RequiredError(
                'pipelineId',
                'Required parameter "pipelineId" was null or undefined when calling pipelineRebuild().'
            );
        }

        if (requestParameters['pipelineRebuildParams'] == null) {
            throw new runtime.RequiredError(
                'pipelineRebuildParams',
                'Required parameter "pipelineRebuildParams" was null or undefined when calling pipelineRebuild().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/pipelines/{pipeline-id}/rebuild`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"pipeline-id"}}`, encodeURIComponent(String(requestParameters['pipelineId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0PipelineRebuildParamsToJSON(requestParameters['pipelineRebuildParams']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rebuilds a pipeline. You can rebuild the whole pipeline or only the unsuccessful and subsequent workflows by setting the partial flag to true.
     * Rebuilds a pipeline
     */
    async pipelineRebuild(requestParameters: PipelineRebuildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipelineRebuildRaw(requestParameters, initOverrides);
    }

    /**
     * Get the specified pipeline of a given Bitrise app. You need to provide both an app slug and a pipeline id. You can get the pipeline id either by calling the [/pipelines](https://api-docs.bitrise.io/#/pipelines/pipeline-list) endpoint or by clicking on the pipeline on bitrise.io and copying the id from the URL. The endpoint returns all the relevant data of the pipeline.
     * Get a pipeline of a given app
     */
    async pipelineShowRaw(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0PipelineShowResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling pipelineShow().'
            );
        }

        if (requestParameters['pipelineId'] == null) {
            throw new runtime.RequiredError(
                'pipelineId',
                'Required parameter "pipelineId" was null or undefined when calling pipelineShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/pipelines/{pipeline-id}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"pipeline-id"}}`, encodeURIComponent(String(requestParameters['pipelineId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0PipelineShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Get the specified pipeline of a given Bitrise app. You need to provide both an app slug and a pipeline id. You can get the pipeline id either by calling the [/pipelines](https://api-docs.bitrise.io/#/pipelines/pipeline-list) endpoint or by clicking on the pipeline on bitrise.io and copying the id from the URL. The endpoint returns all the relevant data of the pipeline.
     * Get a pipeline of a given app
     */
    async pipelineShow(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0PipelineShowResponseModel> {
        const response = await this.pipelineShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
