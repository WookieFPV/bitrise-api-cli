/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceProxyErrorRespModel,
  V0OrganizationGoogleServiceCredentialsListResponse,
  V0OrganizationGoogleServiceCredetialCreateParams,
  V0OrganizationGoogleServiceCredetialCreateResponse,
} from '../models/index';
import {
    ServiceProxyErrorRespModelFromJSON,
    ServiceProxyErrorRespModelToJSON,
    V0OrganizationGoogleServiceCredentialsListResponseFromJSON,
    V0OrganizationGoogleServiceCredentialsListResponseToJSON,
    V0OrganizationGoogleServiceCredetialCreateParamsFromJSON,
    V0OrganizationGoogleServiceCredetialCreateParamsToJSON,
    V0OrganizationGoogleServiceCredetialCreateResponseFromJSON,
    V0OrganizationGoogleServiceCredetialCreateResponseToJSON,
} from '../models/index';

export interface OrganizationsCreateGoogleServiceCredentialsRequest {
    orgSlug: string;
    types: V0OrganizationGoogleServiceCredetialCreateParams;
}

export interface OrganizationsDeleteGoogleServiceCredentialsRequest {
    orgSlug: string;
}

export interface OrganizationsListGoogleServiceCredentialsRequest {
    orgSlug: string;
}

/**
 * 
 */
export class GoogleServiceCredentialsApi extends runtime.BaseAPI {

    /**
     * Creates a new Google Service Credential with the given data.
     * Create Google Service Credential
     */
    async organizationsCreateGoogleServiceCredentialsRaw(requestParameters: OrganizationsCreateGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationGoogleServiceCredetialCreateResponse>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationsCreateGoogleServiceCredentials().'
            );
        }

        if (requestParameters['types'] == null) {
            throw new runtime.RequiredError(
                'types',
                'Required parameter "types" was null or undefined when calling organizationsCreateGoogleServiceCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/google-service-credentials`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0OrganizationGoogleServiceCredetialCreateParamsToJSON(requestParameters['types']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationGoogleServiceCredetialCreateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new Google Service Credential with the given data.
     * Create Google Service Credential
     */
    async organizationsCreateGoogleServiceCredentials(requestParameters: OrganizationsCreateGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationGoogleServiceCredetialCreateResponse> {
        const response = await this.organizationsCreateGoogleServiceCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the Google Service Credential with the identifier.
     * Delete Google Service Credential
     */
    async organizationsDeleteGoogleServiceCredentialsRaw(requestParameters: OrganizationsDeleteGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationsDeleteGoogleServiceCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/google-service-credentials`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the Google Service Credential with the identifier.
     * Delete Google Service Credential
     */
    async organizationsDeleteGoogleServiceCredentials(requestParameters: OrganizationsDeleteGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationsDeleteGoogleServiceCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     * List Google Service credentials for a specific Bitrise Workspace
     * List Google Service credentials for a specific organization
     */
    async organizationsListGoogleServiceCredentialsRaw(requestParameters: OrganizationsListGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationGoogleServiceCredentialsListResponse>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationsListGoogleServiceCredentials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/google-service-credentials`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationGoogleServiceCredentialsListResponseFromJSON(jsonValue));
    }

    /**
     * List Google Service credentials for a specific Bitrise Workspace
     * List Google Service credentials for a specific organization
     */
    async organizationsListGoogleServiceCredentials(requestParameters: OrganizationsListGoogleServiceCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationGoogleServiceCredentialsListResponse> {
        const response = await this.organizationsListGoogleServiceCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
