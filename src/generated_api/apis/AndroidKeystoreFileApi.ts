/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0AndroidKeystoreFileUploadParams,
  V0ProjectFileStorageListResponseModel,
  V0ProjectFileStorageResponseModel,
  V0ProjectFileStorageUploadResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0AndroidKeystoreFileUploadParamsFromJSON,
    V0AndroidKeystoreFileUploadParamsToJSON,
    V0ProjectFileStorageListResponseModelFromJSON,
    V0ProjectFileStorageListResponseModelToJSON,
    V0ProjectFileStorageResponseModelFromJSON,
    V0ProjectFileStorageResponseModelToJSON,
    V0ProjectFileStorageUploadResponseModelFromJSON,
    V0ProjectFileStorageUploadResponseModelToJSON,
} from '../models/index';

export interface AndroidKeystoreFileConfirmRequest {
    appSlug: string;
    androidKeystoreFileSlug: string;
}

export interface AndroidKeystoreFileCreateRequest {
    appSlug: string;
    androidKeystoreFile: V0AndroidKeystoreFileUploadParams;
}

export interface AndroidKeystoreFileDeleteRequest {
    appSlug: string;
    androidKeystoreFileSlug: string;
}

export interface AndroidKeystoreFileListRequest {
    appSlug: string;
    next?: string;
    limit?: number;
}

/**
 * 
 */
export class AndroidKeystoreFileApi extends runtime.BaseAPI {

    /**
     * This is the last step of uploading an android keystore file to Bitrise. Confirm the android keystore file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
     * Confirm an android keystore file upload
     */
    async androidKeystoreFileConfirmRaw(requestParameters: AndroidKeystoreFileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling androidKeystoreFileConfirm().'
            );
        }

        if (requestParameters['androidKeystoreFileSlug'] == null) {
            throw new runtime.RequiredError(
                'androidKeystoreFileSlug',
                'Required parameter "androidKeystoreFileSlug" was null or undefined when calling androidKeystoreFileConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}/uploaded`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"android-keystore-file-slug"}}`, encodeURIComponent(String(requestParameters['androidKeystoreFileSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageResponseModelFromJSON(jsonValue));
    }

    /**
     * This is the last step of uploading an android keystore file to Bitrise. Confirm the android keystore file upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload) guide.
     * Confirm an android keystore file upload
     */
    async androidKeystoreFileConfirm(requestParameters: AndroidKeystoreFileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageResponseModel> {
        const response = await this.androidKeystoreFileConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new Android keystore file to an app. `keystore_file_name` is required if there is already an existing keystore file for the app. It will determine the environment variable key to be used to refer to the keystore file in builds. E.g. `BITRISE_ANDROID_KEYSTORE_<keystore_file_name>_URL`. The `keystore_file_name` can only contain letters, numbers, and underscores.
     * Create an Android keystore file
     */
    async androidKeystoreFileCreateRaw(requestParameters: AndroidKeystoreFileCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageUploadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling androidKeystoreFileCreate().'
            );
        }

        if (requestParameters['androidKeystoreFile'] == null) {
            throw new runtime.RequiredError(
                'androidKeystoreFile',
                'Required parameter "androidKeystoreFile" was null or undefined when calling androidKeystoreFileCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/android-keystore-files`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0AndroidKeystoreFileUploadParamsToJSON(requestParameters['androidKeystoreFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageUploadResponseModelFromJSON(jsonValue));
    }

    /**
     * Add a new Android keystore file to an app. `keystore_file_name` is required if there is already an existing keystore file for the app. It will determine the environment variable key to be used to refer to the keystore file in builds. E.g. `BITRISE_ANDROID_KEYSTORE_<keystore_file_name>_URL`. The `keystore_file_name` can only contain letters, numbers, and underscores.
     * Create an Android keystore file
     */
    async androidKeystoreFileCreate(requestParameters: AndroidKeystoreFileCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageUploadResponseModel> {
        const response = await this.androidKeystoreFileCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app\'s android keystore file. You can fetch an app\'s android keystore file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/android-keystore-files](https://api-docs.bitrise.io/#/android-keystore-file/android-keystore-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-android-keystore-files.html) guide.
     * Delete an android keystore file
     */
    async androidKeystoreFileDeleteRaw(requestParameters: AndroidKeystoreFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling androidKeystoreFileDelete().'
            );
        }

        if (requestParameters['androidKeystoreFileSlug'] == null) {
            throw new runtime.RequiredError(
                'androidKeystoreFileSlug',
                'Required parameter "androidKeystoreFileSlug" was null or undefined when calling androidKeystoreFileDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"android-keystore-file-slug"}}`, encodeURIComponent(String(requestParameters['androidKeystoreFileSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete an app\'s android keystore file. You can fetch an app\'s android keystore file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/android-keystore-files](https://api-docs.bitrise.io/#/android-keystore-file/android-keystore-file-list) endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-android-keystore-files.html) guide.
     * Delete an android keystore file
     */
    async androidKeystoreFileDelete(requestParameters: AndroidKeystoreFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageResponseModel> {
        const response = await this.androidKeystoreFileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the android keystore files that have been uploaded to a specific app.
     * Get a list of the android keystore files
     */
    async androidKeystoreFileListRaw(requestParameters: AndroidKeystoreFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProjectFileStorageListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling androidKeystoreFileList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/android-keystore-files`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProjectFileStorageListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the android keystore files that have been uploaded to a specific app.
     * Get a list of the android keystore files
     */
    async androidKeystoreFileList(requestParameters: AndroidKeystoreFileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProjectFileStorageListResponseModel> {
        const response = await this.androidKeystoreFileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
