/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0ProvProfileDocumentUpdateParams,
  V0ProvisionProfileDownloadResponseModel,
  V0ProvisionProfileListResponseModel,
  V0ProvisionProfileResponseModel,
  V0ProvisionProfileUploadParams,
  V0ProvisionProfileUploadResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0ProvProfileDocumentUpdateParamsFromJSON,
    V0ProvProfileDocumentUpdateParamsToJSON,
    V0ProvisionProfileDownloadResponseModelFromJSON,
    V0ProvisionProfileDownloadResponseModelToJSON,
    V0ProvisionProfileListResponseModelFromJSON,
    V0ProvisionProfileListResponseModelToJSON,
    V0ProvisionProfileResponseModelFromJSON,
    V0ProvisionProfileResponseModelToJSON,
    V0ProvisionProfileUploadParamsFromJSON,
    V0ProvisionProfileUploadParamsToJSON,
    V0ProvisionProfileUploadResponseModelFromJSON,
    V0ProvisionProfileUploadResponseModelToJSON,
} from '../models/index';

export interface ProvisioningProfileConfirmRequest {
    appSlug: string;
    provisioningProfileSlug: string;
}

export interface ProvisioningProfileCreateRequest {
    appSlug: string;
    provisioningProfile: V0ProvisionProfileUploadParams;
}

export interface ProvisioningProfileDeleteRequest {
    appSlug: string;
    provisioningProfileSlug: string;
}

export interface ProvisioningProfileListRequest {
    appSlug: string;
    next?: string;
    limit?: number;
}

export interface ProvisioningProfileShowRequest {
    appSlug: string;
    provisioningProfileSlug: string;
}

export interface ProvisioningProfileUpdateRequest {
    appSlug: string;
    provisioningProfileSlug: string;
    provisioningProfile: V0ProvProfileDocumentUpdateParams;
}

/**
 * 
 */
export class ProvisioningProfileApi extends runtime.BaseAPI {

    /**
     * This is the last step of the upload process. Confirm the provisioning profile upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Confirm a provisioning profile upload
     */
    async provisioningProfileConfirmRaw(requestParameters: ProvisioningProfileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileConfirm().'
            );
        }

        if (requestParameters['provisioningProfileSlug'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfileSlug',
                'Required parameter "provisioningProfileSlug" was null or undefined when calling provisioningProfileConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"provisioning-profile-slug"}}`, encodeURIComponent(String(requestParameters['provisioningProfileSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileResponseModelFromJSON(jsonValue));
    }

    /**
     * This is the last step of the upload process. Confirm the provisioning profile upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Confirm a provisioning profile upload
     */
    async provisioningProfileConfirm(requestParameters: ProvisioningProfileConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileResponseModel> {
        const response = await this.provisioningProfileConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a temporary pre-signed upload URL (expires in 10 minutes) for the provisioning profile and upload it to AWS with a simple `curl` request. To complete the upload process, continue with the [POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     * Create a provisioning profile
     */
    async provisioningProfileCreateRaw(requestParameters: ProvisioningProfileCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileUploadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileCreate().'
            );
        }

        if (requestParameters['provisioningProfile'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfile',
                'Required parameter "provisioningProfile" was null or undefined when calling provisioningProfileCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0ProvisionProfileUploadParamsToJSON(requestParameters['provisioningProfile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileUploadResponseModelFromJSON(jsonValue));
    }

    /**
     * Create a temporary pre-signed upload URL (expires in 10 minutes) for the provisioning profile and upload it to AWS with a simple `curl` request. To complete the upload process, continue with the [POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     * Create a provisioning profile
     */
    async provisioningProfileCreate(requestParameters: ProvisioningProfileCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileUploadResponseModel> {
        const response = await this.provisioningProfileCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app\'s provisioning profile. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     * Delete a provisioning profile
     */
    async provisioningProfileDeleteRaw(requestParameters: ProvisioningProfileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileDelete().'
            );
        }

        if (requestParameters['provisioningProfileSlug'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfileSlug',
                'Required parameter "provisioningProfileSlug" was null or undefined when calling provisioningProfileDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"provisioning-profile-slug"}}`, encodeURIComponent(String(requestParameters['provisioningProfileSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileResponseModelFromJSON(jsonValue));
    }

    /**
     * Delete an app\'s provisioning profile. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     * Delete a provisioning profile
     */
    async provisioningProfileDelete(requestParameters: ProvisioningProfileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileResponseModel> {
        const response = await this.provisioningProfileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the provisioning profiles that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     * Get a list of the provisioning profiles
     */
    async provisioningProfileListRaw(requestParameters: ProvisioningProfileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the provisioning profiles that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     * Get a list of the provisioning profiles
     */
    async provisioningProfileList(requestParameters: ProvisioningProfileListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileListResponseModel> {
        const response = await this.provisioningProfileListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data of a specific provisioning profile. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Getting a specific iOS code signing file\'s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     * Get a specific provisioning profile
     */
    async provisioningProfileShowRaw(requestParameters: ProvisioningProfileShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileDownloadResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileShow().'
            );
        }

        if (requestParameters['provisioningProfileSlug'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfileSlug',
                'Required parameter "provisioningProfileSlug" was null or undefined when calling provisioningProfileShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"provisioning-profile-slug"}}`, encodeURIComponent(String(requestParameters['provisioningProfileSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileDownloadResponseModelFromJSON(jsonValue));
    }

    /**
     * Retrieve data of a specific provisioning profile. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Getting a specific iOS code signing file\'s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     * Get a specific provisioning profile
     */
    async provisioningProfileShow(requestParameters: ProvisioningProfileShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileDownloadResponseModel> {
        const response = await this.provisioningProfileShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an uploaded provisioning profile\'s attributes. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Update a provisioning profile
     */
    async provisioningProfileUpdateRaw(requestParameters: ProvisioningProfileUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ProvisionProfileResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling provisioningProfileUpdate().'
            );
        }

        if (requestParameters['provisioningProfileSlug'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfileSlug',
                'Required parameter "provisioningProfileSlug" was null or undefined when calling provisioningProfileUpdate().'
            );
        }

        if (requestParameters['provisioningProfile'] == null) {
            throw new runtime.RequiredError(
                'provisioningProfile',
                'Required parameter "provisioningProfile" was null or undefined when calling provisioningProfileUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"provisioning-profile-slug"}}`, encodeURIComponent(String(requestParameters['provisioningProfileSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0ProvProfileDocumentUpdateParamsToJSON(requestParameters['provisioningProfile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ProvisionProfileResponseModelFromJSON(jsonValue));
    }

    /**
     * Update an uploaded provisioning profile\'s attributes. You can fetch the provisioning profile\'s slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     * Update a provisioning profile
     */
    async provisioningProfileUpdate(requestParameters: ProvisioningProfileUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ProvisionProfileResponseModel> {
        const response = await this.provisioningProfileUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
