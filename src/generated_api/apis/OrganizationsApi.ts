/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MemberAddRequest,
  OrganizationGroupAddRequest,
  ServiceDtoGroup,
  ServiceDtoMember,
  ServiceProxyErrorRespModel,
  ServiceStandardErrorRespModel,
  V0OrganizationListRespModel,
  V0OrganizationRespModel,
  V0OrganizationUpdateMachineTypeParams,
  V0OrganizationUpdateMachineTypeResponse,
} from '../models/index';
import {
    MemberAddRequestFromJSON,
    MemberAddRequestToJSON,
    OrganizationGroupAddRequestFromJSON,
    OrganizationGroupAddRequestToJSON,
    ServiceDtoGroupFromJSON,
    ServiceDtoGroupToJSON,
    ServiceDtoMemberFromJSON,
    ServiceDtoMemberToJSON,
    ServiceProxyErrorRespModelFromJSON,
    ServiceProxyErrorRespModelToJSON,
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0OrganizationListRespModelFromJSON,
    V0OrganizationListRespModelToJSON,
    V0OrganizationRespModelFromJSON,
    V0OrganizationRespModelToJSON,
    V0OrganizationUpdateMachineTypeParamsFromJSON,
    V0OrganizationUpdateMachineTypeParamsToJSON,
    V0OrganizationUpdateMachineTypeResponseFromJSON,
    V0OrganizationUpdateMachineTypeResponseToJSON,
} from '../models/index';

export interface MemberAddOperationRequest {
    orgSlug: string;
    member: MemberAddRequest;
}

export interface MemberListRequest {
    orgSlug: string;
}

export interface OrgShowRequest {
    orgSlug: string;
}

export interface OrganizationGroupAddOperationRequest {
    orgSlug: string;
    member: OrganizationGroupAddRequest;
}

export interface OrganizationGroupListRequest {
    orgSlug: string;
}

export interface OrganizationMachineTypeUpdateRequest {
    orgSlug: string;
    types: V0OrganizationUpdateMachineTypeParams;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Adds a member to the organization
     * Adds a member to the organization
     */
    async memberAddRaw(requestParameters: MemberAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDtoMember>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling memberAdd().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling memberAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/members`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberAddRequestToJSON(requestParameters['member']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoMemberFromJSON(jsonValue));
    }

    /**
     * Adds a member to the organization
     * Adds a member to the organization
     */
    async memberAdd(requestParameters: MemberAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDtoMember> {
        const response = await this.memberAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the members of the organization
     * List the members of the organization
     */
    async memberListRaw(requestParameters: MemberListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceDtoMember>>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling memberList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/members`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceDtoMemberFromJSON));
    }

    /**
     * List the members of the organization
     * List the members of the organization
     */
    async memberList(requestParameters: MemberListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceDtoMember>> {
        const response = await this.memberListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all Bitrise organizations that the user is part of
     * List the organizations that the user is part of
     */
    async orgListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationListRespModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationListRespModelFromJSON(jsonValue));
    }

    /**
     * List all Bitrise organizations that the user is part of
     * List the organizations that the user is part of
     */
    async orgList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationListRespModel> {
        const response = await this.orgListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a specified Bitrise organization that the user is part of.
     * Get a specified organization.
     */
    async orgShowRaw(requestParameters: OrgShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationRespModel>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling orgShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationRespModelFromJSON(jsonValue));
    }

    /**
     * Get a specified Bitrise organization that the user is part of.
     * Get a specified organization.
     */
    async orgShow(requestParameters: OrgShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationRespModel> {
        const response = await this.orgShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a group to the organization
     * Adds a group to the organization
     */
    async organizationGroupAddRaw(requestParameters: OrganizationGroupAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDtoGroup>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationGroupAdd().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling organizationGroupAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/groups`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationGroupAddRequestToJSON(requestParameters['member']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDtoGroupFromJSON(jsonValue));
    }

    /**
     * Adds a group to the organization
     * Adds a group to the organization
     */
    async organizationGroupAdd(requestParameters: OrganizationGroupAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDtoGroup> {
        const response = await this.organizationGroupAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the groups of an organization
     * List organizations groups
     */
    async organizationGroupListRaw(requestParameters: OrganizationGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceDtoGroup>>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationGroupList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/groups`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceDtoGroupFromJSON));
    }

    /**
     * Lists the groups of an organization
     * List organizations groups
     */
    async organizationGroupList(requestParameters: OrganizationGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceDtoGroup>> {
        const response = await this.organizationGroupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Migrates all apps\' machine types of an organization from one machine type to another
     * Migrate machine types
     */
    async organizationMachineTypeUpdateRaw(requestParameters: OrganizationMachineTypeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationUpdateMachineTypeResponse>> {
        if (requestParameters['orgSlug'] == null) {
            throw new runtime.RequiredError(
                'orgSlug',
                'Required parameter "orgSlug" was null or undefined when calling organizationMachineTypeUpdate().'
            );
        }

        if (requestParameters['types'] == null) {
            throw new runtime.RequiredError(
                'types',
                'Required parameter "types" was null or undefined when calling organizationMachineTypeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/organizations/{org-slug}/apps/machine_types`.replace(`{${"org-slug"}}`, encodeURIComponent(String(requestParameters['orgSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0OrganizationUpdateMachineTypeParamsToJSON(requestParameters['types']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationUpdateMachineTypeResponseFromJSON(jsonValue));
    }

    /**
     * Migrates all apps\' machine types of an organization from one machine type to another
     * Migrate machine types
     */
    async organizationMachineTypeUpdate(requestParameters: OrganizationMachineTypeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationUpdateMachineTypeResponse> {
        const response = await this.organizationMachineTypeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
