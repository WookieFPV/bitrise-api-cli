/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0OrganizationUpdateMachineTypeParams,
  V0OrganizationUpdateMachineTypeResponse,
  V0UserProfileRespModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0OrganizationUpdateMachineTypeParamsFromJSON,
    V0OrganizationUpdateMachineTypeParamsToJSON,
    V0OrganizationUpdateMachineTypeResponseFromJSON,
    V0OrganizationUpdateMachineTypeResponseToJSON,
    V0UserProfileRespModelFromJSON,
    V0UserProfileRespModelToJSON,
} from '../models/index';

export interface UserMachineTypeUpdateRequest {
    userSlug: string;
    types: V0OrganizationUpdateMachineTypeParams;
}

export interface UserShowRequest {
    userSlug: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Migrates all apps\' machine types of a user from one machine type to another
     * Migrate machine types
     */
    async userMachineTypeUpdateRaw(requestParameters: UserMachineTypeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0OrganizationUpdateMachineTypeResponse>> {
        if (requestParameters['userSlug'] == null) {
            throw new runtime.RequiredError(
                'userSlug',
                'Required parameter "userSlug" was null or undefined when calling userMachineTypeUpdate().'
            );
        }

        if (requestParameters['types'] == null) {
            throw new runtime.RequiredError(
                'types',
                'Required parameter "types" was null or undefined when calling userMachineTypeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/user/{user-slug}/apps/machine_types`.replace(`{${"user-slug"}}`, encodeURIComponent(String(requestParameters['userSlug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V0OrganizationUpdateMachineTypeParamsToJSON(requestParameters['types']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0OrganizationUpdateMachineTypeResponseFromJSON(jsonValue));
    }

    /**
     * Migrates all apps\' machine types of a user from one machine type to another
     * Migrate machine types
     */
    async userMachineTypeUpdate(requestParameters: UserMachineTypeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0OrganizationUpdateMachineTypeResponse> {
        const response = await this.userMachineTypeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Shows the authenticated users profile info
     * Get your profile info
     */
    async userProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0UserProfileRespModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0UserProfileRespModelFromJSON(jsonValue));
    }

    /**
     * Shows the authenticated users profile info
     * Get your profile info
     */
    async userProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0UserProfileRespModel> {
        const response = await this.userProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Show information about a specific user
     * Get a specific user
     */
    async userShowRaw(requestParameters: UserShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0UserProfileRespModel>> {
        if (requestParameters['userSlug'] == null) {
            throw new runtime.RequiredError(
                'userSlug',
                'Required parameter "userSlug" was null or undefined when calling userShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/users/{user-slug}`.replace(`{${"user-slug"}}`, encodeURIComponent(String(requestParameters['userSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0UserProfileRespModelFromJSON(jsonValue));
    }

    /**
     * Show information about a specific user
     * Get a specific user
     */
    async userShow(requestParameters: UserShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0UserProfileRespModel> {
        const response = await this.userShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
