/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServiceStandardErrorRespModel,
  V0ArchivedBuildListResponseModel,
  V0BuildAbortParams,
  V0BuildAbortResponseModel,
  V0BuildListAllResponseModel,
  V0BuildListResponseModel,
  V0BuildShowResponseModel,
  V0BuildTriggerParams,
  V0BuildTriggerRespModel,
  V0BuildWorkflowListResponseModel,
} from '../models/index';
import {
    ServiceStandardErrorRespModelFromJSON,
    ServiceStandardErrorRespModelToJSON,
    V0ArchivedBuildListResponseModelFromJSON,
    V0ArchivedBuildListResponseModelToJSON,
    V0BuildAbortParamsFromJSON,
    V0BuildAbortParamsToJSON,
    V0BuildAbortResponseModelFromJSON,
    V0BuildAbortResponseModelToJSON,
    V0BuildListAllResponseModelFromJSON,
    V0BuildListAllResponseModelToJSON,
    V0BuildListResponseModelFromJSON,
    V0BuildListResponseModelToJSON,
    V0BuildShowResponseModelFromJSON,
    V0BuildShowResponseModelToJSON,
    V0BuildTriggerParamsFromJSON,
    V0BuildTriggerParamsToJSON,
    V0BuildTriggerRespModelFromJSON,
    V0BuildTriggerRespModelToJSON,
    V0BuildWorkflowListResponseModelFromJSON,
    V0BuildWorkflowListResponseModelToJSON,
} from '../models/index';

export interface ArchivedBuildsListRequest {
    appSlug: string;
    after: number;
    before: number;
}

export interface BuildAbortRequest {
    appSlug: string;
    buildSlug: string;
    buildAbortParams: V0BuildAbortParams;
}

export interface BuildBitriseYmlShowRequest {
    appSlug: string;
    buildSlug: string;
}

export interface BuildListRequest {
    appSlug: string;
    sortBy?: BuildListSortByEnum;
    branch?: string;
    workflow?: string;
    commitMessage?: string;
    triggerEventType?: string;
    pullRequestId?: number;
    buildNumber?: number;
    after?: number;
    before?: number;
    status?: number;
    isPipelineBuild?: boolean;
    next?: string;
    limit?: number;
}

export interface BuildListAllRequest {
    ownerSlug?: string;
    isOnHold?: boolean;
    status?: number;
    next?: string;
    limit?: number;
}

export interface BuildLogRequest {
    appSlug: string;
    buildSlug: string;
}

export interface BuildShowRequest {
    appSlug: string;
    buildSlug: string;
}

export interface BuildTriggerRequest {
    appSlug: string;
    buildParams: V0BuildTriggerParams;
}

export interface BuildWorkflowListRequest {
    appSlug: string;
}

/**
 * 
 */
export class BuildsApi extends runtime.BaseAPI {

    /**
     * List the first 1000 archived builds of a specified Bitrise app. Set parameters to filter builds:
     * List 1000 archived builds of an app
     */
    async archivedBuildsListRaw(requestParameters: ArchivedBuildsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0ArchivedBuildListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling archivedBuildsList().'
            );
        }

        if (requestParameters['after'] == null) {
            throw new runtime.RequiredError(
                'after',
                'Required parameter "after" was null or undefined when calling archivedBuildsList().'
            );
        }

        if (requestParameters['before'] == null) {
            throw new runtime.RequiredError(
                'before',
                'Required parameter "before" was null or undefined when calling archivedBuildsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/archived-builds`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0ArchivedBuildListResponseModelFromJSON(jsonValue));
    }

    /**
     * List the first 1000 archived builds of a specified Bitrise app. Set parameters to filter builds:
     * List 1000 archived builds of an app
     */
    async archivedBuildsList(requestParameters: ArchivedBuildsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0ArchivedBuildListResponseModel> {
        const response = await this.archivedBuildsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Abort a specific build. Set an abort reason with the `abort_reason` parameter. Use the `abort_with_success` parameter to abort a build but still count it as a successful one.
     * Abort a specific build
     */
    async buildAbortRaw(requestParameters: BuildAbortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildAbortResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildAbort().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling buildAbort().'
            );
        }

        if (requestParameters['buildAbortParams'] == null) {
            throw new runtime.RequiredError(
                'buildAbortParams',
                'Required parameter "buildAbortParams" was null or undefined when calling buildAbort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/abort`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0BuildAbortParamsToJSON(requestParameters['buildAbortParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildAbortResponseModelFromJSON(jsonValue));
    }

    /**
     * Abort a specific build. Set an abort reason with the `abort_reason` parameter. Use the `abort_with_success` parameter to abort a build but still count it as a successful one.
     * Abort a specific build
     */
    async buildAbort(requestParameters: BuildAbortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildAbortResponseModel> {
        const response = await this.buildAbortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the bitrise.yml file of one of the builds of a given app. This will return the `bitrise.yml` configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     * Get the bitrise.yml of a build
     */
    async buildBitriseYmlShowRaw(requestParameters: BuildBitriseYmlShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildBitriseYmlShow().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling buildBitriseYmlShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/bitrise.yml`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the bitrise.yml file of one of the builds of a given app. This will return the `bitrise.yml` configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     * Get the bitrise.yml of a build
     */
    async buildBitriseYmlShow(requestParameters: BuildBitriseYmlShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.buildBitriseYmlShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     * List all builds of an app
     */
    async buildListRaw(requestParameters: BuildListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['branch'] != null) {
            queryParameters['branch'] = requestParameters['branch'];
        }

        if (requestParameters['workflow'] != null) {
            queryParameters['workflow'] = requestParameters['workflow'];
        }

        if (requestParameters['commitMessage'] != null) {
            queryParameters['commit_message'] = requestParameters['commitMessage'];
        }

        if (requestParameters['triggerEventType'] != null) {
            queryParameters['trigger_event_type'] = requestParameters['triggerEventType'];
        }

        if (requestParameters['pullRequestId'] != null) {
            queryParameters['pull_request_id'] = requestParameters['pullRequestId'];
        }

        if (requestParameters['buildNumber'] != null) {
            queryParameters['build_number'] = requestParameters['buildNumber'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['isPipelineBuild'] != null) {
            queryParameters['is_pipeline_build'] = requestParameters['isPipelineBuild'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildListResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     * List all builds of an app
     */
    async buildList(requestParameters: BuildListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildListResponseModel> {
        const response = await this.buildListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     * List all builds
     */
    async buildListAllRaw(requestParameters: BuildListAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildListAllResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['ownerSlug'] != null) {
            queryParameters['owner_slug'] = requestParameters['ownerSlug'];
        }

        if (requestParameters['isOnHold'] != null) {
            queryParameters['is_on_hold'] = requestParameters['isOnHold'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/builds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildListAllResponseModelFromJSON(jsonValue));
    }

    /**
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     * List all builds
     */
    async buildListAll(requestParameters: BuildListAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildListAllResponseModel> {
        const response = await this.buildListAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. Preview of the log is returned in `log_chunks` field in JSON format. You can download the full raw log in txt by using the signed url returned in `expiring_raw_log_url`. Be aware that this url is expiring in 10 minutes!
     * Get the build log of a build
     */
    async buildLogRaw(requestParameters: BuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildLog().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling buildLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}/log`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. Preview of the log is returned in `log_chunks` field in JSON format. You can download the full raw log in txt by using the signed url returned in `expiring_raw_log_url`. Be aware that this url is expiring in 10 minutes!
     * Get the build log of a build
     */
    async buildLog(requestParameters: BuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildLogRaw(requestParameters, initOverrides);
    }

    /**
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     * Get a build of a given app
     */
    async buildShowRaw(requestParameters: BuildShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildShowResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildShow().'
            );
        }

        if (requestParameters['buildSlug'] == null) {
            throw new runtime.RequiredError(
                'buildSlug',
                'Required parameter "buildSlug" was null or undefined when calling buildShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds/{build-slug}`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))).replace(`{${"build-slug"}}`, encodeURIComponent(String(requestParameters['buildSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildShowResponseModelFromJSON(jsonValue));
    }

    /**
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     * Get a build of a given app
     */
    async buildShow(requestParameters: BuildShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildShowResponseModel> {
        const response = await this.buildShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a new build/pipeline. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow/pipeline ID. You can also set specific parameters for Pull Request builds/pipelines and define additional environment variables for your build/pipeline. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     * Trigger a new build/pipeline
     */
    async buildTriggerRaw(requestParameters: BuildTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildTriggerRespModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildTrigger().'
            );
        }

        if (requestParameters['buildParams'] == null) {
            throw new runtime.RequiredError(
                'buildParams',
                'Required parameter "buildParams" was null or undefined when calling buildTrigger().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/builds`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V0BuildTriggerParamsToJSON(requestParameters['buildParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildTriggerRespModelFromJSON(jsonValue));
    }

    /**
     * Trigger a new build/pipeline. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow/pipeline ID. You can also set specific parameters for Pull Request builds/pipelines and define additional environment variables for your build/pipeline. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     * Trigger a new build/pipeline
     */
    async buildTrigger(requestParameters: BuildTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildTriggerRespModel> {
        const response = await this.buildTriggerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app\'s `bitrise.yml` configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the `bitrise.yml` file.
     * List the workflows of an app
     */
    async buildWorkflowListRaw(requestParameters: BuildWorkflowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V0BuildWorkflowListResponseModel>> {
        if (requestParameters['appSlug'] == null) {
            throw new runtime.RequiredError(
                'appSlug',
                'Required parameter "appSlug" was null or undefined when calling buildWorkflowList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Bitrise-Addon-Auth-Token"] = await this.configuration.apiKey("Bitrise-Addon-Auth-Token"); // AddonAuthToken authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PersonalAccessToken authentication
        }

        const response = await this.request({
            path: `/apps/{app-slug}/build-workflows`.replace(`{${"app-slug"}}`, encodeURIComponent(String(requestParameters['appSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V0BuildWorkflowListResponseModelFromJSON(jsonValue));
    }

    /**
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app\'s `bitrise.yml` configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the `bitrise.yml` file.
     * List the workflows of an app
     */
    async buildWorkflowList(requestParameters: BuildWorkflowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V0BuildWorkflowListResponseModel> {
        const response = await this.buildWorkflowListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BuildListSortByEnum = {
    RunningFirst: 'running_first',
    CreatedAt: 'created_at'
} as const;
export type BuildListSortByEnum = typeof BuildListSortByEnum[keyof typeof BuildListSortByEnum];
