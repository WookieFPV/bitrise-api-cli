/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddonsSetupGuide } from './AddonsSetupGuide';
import {
    AddonsSetupGuideFromJSON,
    AddonsSetupGuideFromJSONTyped,
    AddonsSetupGuideToJSON,
    AddonsSetupGuideToJSONTyped,
} from './AddonsSetupGuide';
import type { AddonsPlan } from './AddonsPlan';
import {
    AddonsPlanFromJSON,
    AddonsPlanFromJSONTyped,
    AddonsPlanToJSON,
    AddonsPlanToJSONTyped,
} from './AddonsPlan';
import type { AddonsDeveloperLink } from './AddonsDeveloperLink';
import {
    AddonsDeveloperLinkFromJSON,
    AddonsDeveloperLinkFromJSONTyped,
    AddonsDeveloperLinkToJSON,
    AddonsDeveloperLinkToJSONTyped,
} from './AddonsDeveloperLink';

/**
 * 
 * @export
 * @interface AddonsAddon
 */
export interface AddonsAddon {
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    bannerImage?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonsAddon
     */
    cardHeaderColors?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonsAddon
     */
    categories?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    description?: string;
    /**
     * 
     * @type {Array<AddonsDeveloperLink>}
     * @memberof AddonsAddon
     */
    developerLinks?: Array<AddonsDeveloperLink>;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    documentationUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddonsAddon
     */
    hasUi?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddonsAddon
     */
    isBeta?: boolean;
    /**
     * 
     * @type {Array<AddonsPlan>}
     * @memberof AddonsAddon
     */
    plans?: Array<AddonsPlan>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonsAddon
     */
    platforms?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonsAddon
     */
    previewImages?: Array<string>;
    /**
     * 
     * @type {AddonsSetupGuide}
     * @memberof AddonsAddon
     */
    setupGuide?: AddonsSetupGuide;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    subtitle?: string;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof AddonsAddon
     */
    title?: string;
}

/**
 * Check if a given object implements the AddonsAddon interface.
 */
export function instanceOfAddonsAddon(value: object): value is AddonsAddon {
    return true;
}

export function AddonsAddonFromJSON(json: any): AddonsAddon {
    return AddonsAddonFromJSONTyped(json, false);
}

export function AddonsAddonFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddonsAddon {
    if (json == null) {
        return json;
    }
    return {
        
        'bannerImage': json['banner_image'] == null ? undefined : json['banner_image'],
        'cardHeaderColors': json['card_header_colors'] == null ? undefined : json['card_header_colors'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'description': json['description'] == null ? undefined : json['description'],
        'developerLinks': json['developer_links'] == null ? undefined : ((json['developer_links'] as Array<any>).map(AddonsDeveloperLinkFromJSON)),
        'documentationUrl': json['documentation_url'] == null ? undefined : json['documentation_url'],
        'hasUi': json['has_ui'] == null ? undefined : json['has_ui'],
        'icon': json['icon'] == null ? undefined : json['icon'],
        'id': json['id'] == null ? undefined : json['id'],
        'isBeta': json['is_beta'] == null ? undefined : json['is_beta'],
        'plans': json['plans'] == null ? undefined : ((json['plans'] as Array<any>).map(AddonsPlanFromJSON)),
        'platforms': json['platforms'] == null ? undefined : json['platforms'],
        'previewImages': json['preview_images'] == null ? undefined : json['preview_images'],
        'setupGuide': json['setup_guide'] == null ? undefined : AddonsSetupGuideFromJSON(json['setup_guide']),
        'subtitle': json['subtitle'] == null ? undefined : json['subtitle'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'title': json['title'] == null ? undefined : json['title'],
    };
}

export function AddonsAddonToJSON(json: any): AddonsAddon {
    return AddonsAddonToJSONTyped(json, false);
}

export function AddonsAddonToJSONTyped(value?: AddonsAddon | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'banner_image': value['bannerImage'],
        'card_header_colors': value['cardHeaderColors'],
        'categories': value['categories'],
        'description': value['description'],
        'developer_links': value['developerLinks'] == null ? undefined : ((value['developerLinks'] as Array<any>).map(AddonsDeveloperLinkToJSON)),
        'documentation_url': value['documentationUrl'],
        'has_ui': value['hasUi'],
        'icon': value['icon'],
        'id': value['id'],
        'is_beta': value['isBeta'],
        'plans': value['plans'] == null ? undefined : ((value['plans'] as Array<any>).map(AddonsPlanToJSON)),
        'platforms': value['platforms'],
        'preview_images': value['previewImages'],
        'setup_guide': AddonsSetupGuideToJSON(value['setupGuide']),
        'subtitle': value['subtitle'],
        'summary': value['summary'],
        'title': value['title'],
    };
}

