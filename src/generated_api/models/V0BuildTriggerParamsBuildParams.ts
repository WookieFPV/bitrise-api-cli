/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V0CommitPaths } from './V0CommitPaths';
import {
    V0CommitPathsFromJSON,
    V0CommitPathsFromJSONTyped,
    V0CommitPathsToJSON,
    V0CommitPathsToJSONTyped,
} from './V0CommitPaths';
import type { V0BuildParamsEnvironment } from './V0BuildParamsEnvironment';
import {
    V0BuildParamsEnvironmentFromJSON,
    V0BuildParamsEnvironmentFromJSONTyped,
    V0BuildParamsEnvironmentToJSON,
    V0BuildParamsEnvironmentToJSONTyped,
} from './V0BuildParamsEnvironment';

/**
 * 
 * @export
 * @interface V0BuildTriggerParamsBuildParams
 */
export interface V0BuildTriggerParamsBuildParams {
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    baseRepositoryUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    branch?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    branchDest?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    branchDestRepoOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    branchRepoOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    buildRequestSlug?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    commitHash?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    commitMessage?: string;
    /**
     * 
     * @type {Array<V0CommitPaths>}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    commitPaths?: Array<V0CommitPaths>;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    diffUrl?: string;
    /**
     * 
     * @type {Array<V0BuildParamsEnvironment>}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    environments?: Array<V0BuildParamsEnvironment>;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    headRepositoryUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pipelineId?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestAuthor?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestHeadBranch?: string;
    /**
     * 
     * @type {object}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestId?: object;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestMergeBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestRepositoryUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    pullRequestUnverifiedMergeBranch?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    skipGitStatusReport?: boolean;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof V0BuildTriggerParamsBuildParams
     */
    workflowId?: string;
}

/**
 * Check if a given object implements the V0BuildTriggerParamsBuildParams interface.
 */
export function instanceOfV0BuildTriggerParamsBuildParams(value: object): value is V0BuildTriggerParamsBuildParams {
    return true;
}

export function V0BuildTriggerParamsBuildParamsFromJSON(json: any): V0BuildTriggerParamsBuildParams {
    return V0BuildTriggerParamsBuildParamsFromJSONTyped(json, false);
}

export function V0BuildTriggerParamsBuildParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V0BuildTriggerParamsBuildParams {
    if (json == null) {
        return json;
    }
    return {
        
        'baseRepositoryUrl': json['base_repository_url'] == null ? undefined : json['base_repository_url'],
        'branch': json['branch'] == null ? undefined : json['branch'],
        'branchDest': json['branch_dest'] == null ? undefined : json['branch_dest'],
        'branchDestRepoOwner': json['branch_dest_repo_owner'] == null ? undefined : json['branch_dest_repo_owner'],
        'branchRepoOwner': json['branch_repo_owner'] == null ? undefined : json['branch_repo_owner'],
        'buildRequestSlug': json['build_request_slug'] == null ? undefined : json['build_request_slug'],
        'commitHash': json['commit_hash'] == null ? undefined : json['commit_hash'],
        'commitMessage': json['commit_message'] == null ? undefined : json['commit_message'],
        'commitPaths': json['commit_paths'] == null ? undefined : ((json['commit_paths'] as Array<any>).map(V0CommitPathsFromJSON)),
        'diffUrl': json['diff_url'] == null ? undefined : json['diff_url'],
        'environments': json['environments'] == null ? undefined : ((json['environments'] as Array<any>).map(V0BuildParamsEnvironmentFromJSON)),
        'headRepositoryUrl': json['head_repository_url'] == null ? undefined : json['head_repository_url'],
        'pipelineId': json['pipeline_id'] == null ? undefined : json['pipeline_id'],
        'pullRequestAuthor': json['pull_request_author'] == null ? undefined : json['pull_request_author'],
        'pullRequestHeadBranch': json['pull_request_head_branch'] == null ? undefined : json['pull_request_head_branch'],
        'pullRequestId': json['pull_request_id'] == null ? undefined : json['pull_request_id'],
        'pullRequestMergeBranch': json['pull_request_merge_branch'] == null ? undefined : json['pull_request_merge_branch'],
        'pullRequestRepositoryUrl': json['pull_request_repository_url'] == null ? undefined : json['pull_request_repository_url'],
        'pullRequestUnverifiedMergeBranch': json['pull_request_unverified_merge_branch'] == null ? undefined : json['pull_request_unverified_merge_branch'],
        'skipGitStatusReport': json['skip_git_status_report'] == null ? undefined : json['skip_git_status_report'],
        'tag': json['tag'] == null ? undefined : json['tag'],
        'workflowId': json['workflow_id'] == null ? undefined : json['workflow_id'],
    };
}

export function V0BuildTriggerParamsBuildParamsToJSON(json: any): V0BuildTriggerParamsBuildParams {
    return V0BuildTriggerParamsBuildParamsToJSONTyped(json, false);
}

export function V0BuildTriggerParamsBuildParamsToJSONTyped(value?: V0BuildTriggerParamsBuildParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'base_repository_url': value['baseRepositoryUrl'],
        'branch': value['branch'],
        'branch_dest': value['branchDest'],
        'branch_dest_repo_owner': value['branchDestRepoOwner'],
        'branch_repo_owner': value['branchRepoOwner'],
        'build_request_slug': value['buildRequestSlug'],
        'commit_hash': value['commitHash'],
        'commit_message': value['commitMessage'],
        'commit_paths': value['commitPaths'] == null ? undefined : ((value['commitPaths'] as Array<any>).map(V0CommitPathsToJSON)),
        'diff_url': value['diffUrl'],
        'environments': value['environments'] == null ? undefined : ((value['environments'] as Array<any>).map(V0BuildParamsEnvironmentToJSON)),
        'head_repository_url': value['headRepositoryUrl'],
        'pipeline_id': value['pipelineId'],
        'pull_request_author': value['pullRequestAuthor'],
        'pull_request_head_branch': value['pullRequestHeadBranch'],
        'pull_request_id': value['pullRequestId'],
        'pull_request_merge_branch': value['pullRequestMergeBranch'],
        'pull_request_repository_url': value['pullRequestRepositoryUrl'],
        'pull_request_unverified_merge_branch': value['pullRequestUnverifiedMergeBranch'],
        'skip_git_status_report': value['skipGitStatusReport'],
        'tag': value['tag'],
        'workflow_id': value['workflowId'],
    };
}

