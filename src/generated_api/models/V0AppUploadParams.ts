/* tslint:disable */
/* eslint-disable */
/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V0AppUploadParams
 */
export interface V0AppUploadParams {
    /**
     * The default branch of the repository. If it's not specified, it will be `master`.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    defaultBranchName?: string;
    /**
     * [Deprecated] You no longer need to provide this field.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    gitOwner?: string;
    /**
     * [Deprecated] You no longer need to provide this field.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    gitRepoSlug?: string;
    /**
     * If `true` then the repository visibility setting will be public, in case of `false` it will be private
     * @type {boolean}
     * @memberof V0AppUploadParams
     */
    isPublic: boolean;
    /**
     * Toggles whether manual approval should be enabled for the app's builds. If it's not specified, it will be `true`.
     * @type {boolean}
     * @memberof V0AppUploadParams
     */
    manualApprovalEnabled?: boolean;
    /**
     * The slug of the organization, who will be the owner of the application. If it's not specified, then the authenticated user will be the owner.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    organizationSlug?: string;
    /**
     * The git provider you are using, it can be `github`, `bitbucket`, `gitlab`, `gitlab-self-hosted` or `custom`
     * @type {string}
     * @memberof V0AppUploadParams
     */
    provider?: string;
    /**
     * The URL of your repository
     * @type {string}
     * @memberof V0AppUploadParams
     */
    repoUrl: string;
    /**
     * The title of the application. If it's not specified, it will be the git repository's name.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    title?: string;
    /**
     * [Deprecated] You no longer need to provide this field.
     * @type {string}
     * @memberof V0AppUploadParams
     */
    type?: string;
}

/**
 * Check if a given object implements the V0AppUploadParams interface.
 */
export function instanceOfV0AppUploadParams(value: object): value is V0AppUploadParams {
    if (!('isPublic' in value) || value['isPublic'] === undefined) return false;
    if (!('repoUrl' in value) || value['repoUrl'] === undefined) return false;
    return true;
}

export function V0AppUploadParamsFromJSON(json: any): V0AppUploadParams {
    return V0AppUploadParamsFromJSONTyped(json, false);
}

export function V0AppUploadParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V0AppUploadParams {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultBranchName': json['default_branch_name'] == null ? undefined : json['default_branch_name'],
        'gitOwner': json['git_owner'] == null ? undefined : json['git_owner'],
        'gitRepoSlug': json['git_repo_slug'] == null ? undefined : json['git_repo_slug'],
        'isPublic': json['is_public'],
        'manualApprovalEnabled': json['manual_approval_enabled'] == null ? undefined : json['manual_approval_enabled'],
        'organizationSlug': json['organization_slug'] == null ? undefined : json['organization_slug'],
        'provider': json['provider'] == null ? undefined : json['provider'],
        'repoUrl': json['repo_url'],
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function V0AppUploadParamsToJSON(json: any): V0AppUploadParams {
    return V0AppUploadParamsToJSONTyped(json, false);
}

export function V0AppUploadParamsToJSONTyped(value?: V0AppUploadParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'default_branch_name': value['defaultBranchName'],
        'git_owner': value['gitOwner'],
        'git_repo_slug': value['gitRepoSlug'],
        'is_public': value['isPublic'],
        'manual_approval_enabled': value['manualApprovalEnabled'],
        'organization_slug': value['organizationSlug'],
        'provider': value['provider'],
        'repo_url': value['repoUrl'],
        'title': value['title'],
        'type': value['type'],
    };
}

